// ==========================================
// ADMIN SCHEMA - Admin Panel & Security
// ==========================================

model Admin {
  id           String @id @default(cuid())
  email        String @unique
  username     String @unique @db.VarChar(50)
  passwordHash String @db.VarChar(255)

  role         AdminRole   @default(SUPPORT)
  status       AdminStatus @default(PENDING)
  isSuperAdmin Boolean     @default(false)

  // MFA
  requiresMfa    Boolean   @default(true)
  mfaSecret      String?   @db.VarChar(255)
  mfaBackupCodes Json?
  mfaVerifiedAt  DateTime? @db.Timestamptz(6)

  // IP whitelisting
  allowedIpAddresses Json?

  // Session tracking
  lastLoginAt         DateTime? @db.Timestamptz(6)
  lastLoginIp         String?   @db.VarChar(45)
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime? @db.Timestamptz(6)

  // Password management
  passwordChangedAt   DateTime? @db.Timestamptz(6)
  passwordResetToken  String?   @unique @db.VarChar(255)
  passwordResetExpiry DateTime? @db.Timestamptz(6)

  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(6)
  createdBy     String?
  deactivatedAt DateTime? @db.Timestamptz(6)
  deactivatedBy String?

  sessions    AdminSession[]
  auditLogs   AdminAuditLog[]
  permissions AdminPermission[]
  apiKeys     AdminAPIKey[]
  invitations AdminInvitation[] @relation("InvitedBy")

  @@index([email, status])
  @@index([username])
  @@index([status, role])
  @@index([lastLoginAt])
  @@schema("admin")
}

model AdminSession {
  id                String  @id @default(cuid())
  adminId           String
  token             String  @unique @db.VarChar(255)
  refreshToken      String? @unique @db.VarChar(255)
  ipAddress         String  @db.VarChar(45)
  userAgent         String  @db.VarChar(500)
  deviceFingerprint String? @db.VarChar(255)

  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt      DateTime  @db.Timestamptz(6)
  lastActivityAt DateTime  @default(now()) @db.Timestamptz(6)
  revokedAt      DateTime? @db.Timestamptz(6)
  revokedReason  String?   @db.VarChar(255)

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId, revokedAt, expiresAt])
  @@index([token])
  @@index([expiresAt])
  @@index([ipAddress, createdAt])
  @@schema("admin")
}

model AdminAuditLog {
  id              String        @id @default(cuid())
  adminId         String?
  action          AdminAction
  resource        AdminResource
  resourceId      String?       @db.VarChar(255)
  method          String        @db.VarChar(10)
  endpoint        String        @db.VarChar(500)
  ipAddress       String        @db.VarChar(45)
  userAgent       String?       @db.VarChar(500)
  changesBefore   Json?
  changesAfter    Json?
  status          Int
  errorMessage    String?       @db.Text
  metadata        Json?
  executionTimeMs Int?
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)

  admin Admin? @relation(fields: [adminId], references: [id], onDelete: SetNull)

  @@index([adminId, createdAt(sort: Desc)])
  @@index([action, createdAt(sort: Desc)])
  @@index([resource, resourceId])
  @@index([ipAddress, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@schema("admin")
}

model AdminPermission {
  id         String             @id @default(cuid())
  adminId    String
  permission SpecificPermission
  resource   AdminResource?
  grantedAt  DateTime           @default(now()) @db.Timestamptz(6)
  grantedBy  String?
  expiresAt  DateTime?          @db.Timestamptz(6)

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([adminId, permission, resource])
  @@index([adminId])
  @@index([permission, resource])
  @@index([expiresAt])
  @@schema("admin")
}

model AdminAPIKey {
  id         String @id @default(cuid())
  adminId    String
  name       String @db.VarChar(100)
  keyHash    String @unique @db.VarChar(255)
  keyPrefix  String @db.VarChar(20)
  scopes     Json
  rateLimit  Int?
  allowedIps Json?

  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  lastUsedAt DateTime? @db.Timestamptz(6)
  expiresAt  DateTime? @db.Timestamptz(6)
  revokedAt  DateTime? @db.Timestamptz(6)

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([keyHash])
  @@index([expiresAt, revokedAt])
  @@schema("admin")
}

model AdminInvitation {
  id         String    @id @default(cuid())
  email      String    @db.VarChar(255)
  role       AdminRole
  token      String    @unique @db.VarChar(255)
  invitedBy  String
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime  @db.Timestamptz(6)
  acceptedAt DateTime? @db.Timestamptz(6)

  inviter Admin @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@index([token, expiresAt])
  @@index([email])
  @@schema("admin")
}

model AdminSecurityEvent {
  id          String            @id @default(cuid())
  eventType   SecurityEventType
  severity    SecuritySeverity
  adminId     String?
  ipAddress   String            @db.VarChar(45)
  userAgent   String?           @db.VarChar(500)
  description String            @db.Text
  metadata    Json?
  resolved    Boolean           @default(false)
  resolvedAt  DateTime?         @db.Timestamptz(6)
  resolvedBy  String?
  createdAt   DateTime          @default(now()) @db.Timestamptz(6)

  @@index([eventType, severity, createdAt(sort: Desc)])
  @@index([adminId, createdAt(sort: Desc)])
  @@index([resolved, severity])
  @@index([ipAddress, createdAt(sort: Desc)])
  @@schema("admin")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  FINANCE
  SUPPORT
  DEVELOPER
  ANALYST

  @@schema("admin")
}

enum AdminStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DEACTIVATED
  LOCKED

  @@schema("admin")
}

enum AdminAction {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_SUSPENDED
  WORKSPACE_DELETED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELLED
  CREDITS_ADDED
  CREDITS_REMOVED
  REFUND_ISSUED
  MODEL_ADDED
  MODEL_UPDATED
  PRICING_CHANGED
  ADMIN_INVITED
  ADMIN_CREATED
  ADMIN_ROLE_CHANGED
  PERMISSION_GRANTED
  SESSION_REVOKED
  CONFIG_CHANGED
  DATA_EXPORTED

  @@schema("admin")
}

enum AdminResource {
  USER
  WORKSPACE
  SUBSCRIPTION
  CREDIT
  MODEL
  ADMIN
  PERMISSION
  SESSION
  API_KEY
  CANVAS
  ACTION_POD
  DOCUMENT
  AUDIT_LOG
  SYSTEM_CONFIG

  @@schema("admin")
}

enum SpecificPermission {
  USER_VIEW
  USER_UPDATE
  USER_DELETE
  USER_SUSPEND
  WORKSPACE_VIEW
  WORKSPACE_DELETE
  BILLING_VIEW
  BILLING_MANAGE
  CREDITS_MANAGE
  REFUND_ISSUE
  MODEL_VIEW
  MODEL_MANAGE
  PRICING_MANAGE
  ADMIN_VIEW
  ADMIN_INVITE
  ADMIN_MANAGE
  SYSTEM_CONFIG_VIEW
  SYSTEM_CONFIG_MANAGE
  AUDIT_LOG_VIEW
  AUDIT_LOG_EXPORT
  DATA_EXPORT
  DATA_DELETE

  @@schema("admin")
}

enum SecurityEventType {
  FAILED_LOGIN
  MULTIPLE_FAILED_LOGINS
  SUSPICIOUS_IP
  ACCOUNT_LOCKED
  MFA_FAILED
  UNAUTHORIZED_ACCESS_ATTEMPT

  @@schema("admin")
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@schema("admin")
}

// ==========================================
// BILLING SCHEMA - Subscriptions & Pricing
// ==========================================

model Subscription {
  id          String             @id @default(cuid())
  workspaceId String             @unique
  tier        SubscriptionTier   @default(HOBBYIST)
  status      SubscriptionStatus @default(ACTIVE)

  stripeCustomerId     String? @unique
  stripeSubscriptionId String? @unique

  credits            Int       @default(0)
  monthlyCreditQuota Int       @default(0)
  creditResetDate    DateTime? @db.Timestamptz(6)

  maxCanvases               Int @default(3)
  maxActionPodsPerCanvas    Int @default(50)
  maxDocumentSizeInMB       Int @default(10)
  maxCollaboratorsPerCanvas Int @default(0)

  canInviteToWorkspace Boolean @default(false)
  canInviteToCanvas    Boolean @default(false)
  canCreatePublicLinks Boolean @default(true)
  canUseAdvancedModels Boolean @default(false)
  canAccessAnalytics   Boolean @default(false)
  canExportData        Boolean @default(false)

  nextBillingDate    DateTime? @db.Timestamptz(6)
  currentPeriodStart DateTime? @db.Timestamptz(6)
  currentPeriodEnd   DateTime? @db.Timestamptz(6)
  cancelAtPeriodEnd  Boolean   @default(false)

  isByokMode Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace              Workspace                @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  usageLogs              PodUsageLog[]
  creditPurchases        CreditPurchase[]
  creditUsage            CreditUsageLog[]
  documentProcessingCost DocumentProcessingCost[]

  @@index([status, nextBillingDate])
  @@index([tier, status])
  @@index([creditResetDate])
  @@schema("billing")
}

model CreditPurchase {
  id               String   @id @default(cuid())
  subscriptionId   String
  creditsPurchased Int
  amountPaid       Decimal  @db.Decimal(10, 2)
  currency         String   @default("USD") @db.VarChar(3)
  stripeChargeId   String   @unique
  status           String   @default("succeeded") @db.VarChar(50)
  purchasedAt      DateTime @default(now()) @db.Timestamptz(6)

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, purchasedAt(sort: Desc)])
  @@index([stripeChargeId])
  @@schema("billing")
}

model CreditUsageLog {
  id             String @id @default(cuid())
  subscriptionId String
  workspaceId    String
  canvasId       String
  podId          String
  executionId    String

  creditsUsed   Int @default(0)
  balanceBefore Int
  balanceAfter  Int

  provider  LLMProvider
  modelId   String      @db.VarChar(255)
  modelName String?     @db.VarChar(255)

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, createdAt(sort: Desc)])
  @@index([workspaceId, createdAt(sort: Desc)])
  @@index([executionId])
  @@index([provider, modelId, createdAt(sort: Desc)])
  @@schema("billing")
}

model ModelPricingTier {
  id       String        @id @default(cuid())
  provider LLMProvider
  modelId  String        @db.VarChar(255)
  category ModelCategory

  displayName String  @db.VarChar(255)
  description String? @db.VarChar(500)

  inputTokenCost     Decimal @db.Decimal(12, 8)
  outputTokenCost    Decimal @db.Decimal(12, 8)
  reasoningTokenCost Decimal @default(0) @db.Decimal(12, 8)

  creditsPerMillionInputTokens     Int
  creditsPerMillionOutputTokens    Int
  creditsPerMillionReasoningTokens Int @default(0)

  maxTokens            Int?
  maxOutputTokens      Int?
  supportsStreaming    Boolean @default(true)
  supportsVision       Boolean @default(false)
  supportsAudio        Boolean @default(false)
  supportsVideo        Boolean @default(false)
  supportsFunctions    Boolean @default(false)
  supportsJsonMode     Boolean @default(false)
  supportsSystemPrompt Boolean @default(true)

  providerConfig Json?

  isActive       Boolean   @default(true)
  effectiveFrom  DateTime  @db.Timestamptz(6)
  effectiveUntil DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([provider, modelId, effectiveFrom])
  @@index([provider, modelId, isActive, effectiveFrom])
  @@index([provider, category, isActive])
  @@index([isActive, effectiveFrom])
  @@index([category, isActive])
  @@schema("billing")
}

enum SubscriptionTier {
  HOBBYIST // FREE
  PRO // $20/month
  TEAM // $50/user/month

  @@schema("billing")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
  INCOMPLETE
  PAUSED

  @@schema("billing")
}

enum ModelCategory {
  WORKHORSE
  POWERHOUSE
  REASONING
  SPECIALIST
  IMAGE_GEN
  VIDEO_GEN
  AUDIO_GEN
  EMBEDDING
  RERANKING
  MODERATION
  SEARCH
  TRANSLATION

  @@schema("billing")
}

// /prisma/schemas/canvas.prisma

// ==========================================
// CANVAS SCHEMA - Spaces, Flows (Canvases), Pods
// ==========================================

model Space {
  id          String  @id @default(cuid())
  workspaceId String
  name        String  @db.VarChar(255)
  description String? @db.VarChar(1000)

  customInstructions String? @db.Text

  icon  String? @db.VarChar(50)
  color String? @db.VarChar(7)

  createdBy String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  flows     Flow[]

  @@unique([workspaceId, name])
  @@index([workspaceId, updatedAt(sort: Desc)])
  @@index([workspaceId, createdAt(sort: Desc)])
  @@schema("canvas")
}

model Flow {
  id          String         @id @default(cuid())
  workspaceId String
  spaceId     String? // OPTIONAL - Flow can exist without a Space
  name        String         @db.VarChar(255)
  description String?        @db.VarChar(500)
  version     Int            @default(1)
  visibility  FlowVisibility @default(PRIVATE)

  createdBy String

  thumbnailS3Key       String?   @db.VarChar(512)
  thumbnailGeneratedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace      Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  space          Space?             @relation(fields: [spaceId], references: [id], onDelete: SetNull)
  pods           Pod[]
  edges          Edge[]
  contextualPods Pod[]              @relation("FlowAsContext")
  contextModules ContextModule[]    @relation("FlowOriginal")
  collaborators  FlowCollaborator[]
  invitations    FlowInvitation[]
  sessions       FlowSession[]
  activityLog    FlowActivityLog[]
  comments       FlowComment[]

  @@index([spaceId, updatedAt(sort: Desc)])
  @@index([spaceId, createdAt(sort: Desc)])
  @@index([workspaceId, updatedAt(sort: Desc)])
  @@index([workspaceId, createdAt(sort: Desc)])
  @@index([workspaceId, visibility])
  @@index([createdBy, createdAt(sort: Desc)])
  @@schema("canvas")
}

model FlowInvitation {
  id     String @id @default(cuid())
  flowId String
  email  String @db.VarChar(255)

  accessLevel FlowAccessLevel @default(EDITOR)
  permissions Json?

  invitedBy     String
  invitedUserId String?

  token  String           @unique @db.VarChar(255)
  status InvitationStatus @default(PENDING)

  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime  @db.Timestamptz(6)
  acceptedAt DateTime? @db.Timestamptz(6)

  flow        Flow  @relation(fields: [flowId], references: [id], onDelete: Cascade)
  inviter     User  @relation("FlowInvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  invitedUser User? @relation("FlowInvitedUser", fields: [invitedUserId], references: [id], onDelete: SetNull)

  @@index([flowId, status])
  @@index([email, status])
  @@index([token, expiresAt])
  @@schema("canvas")
}

model FlowCollaborator {
  id     String @id @default(cuid())
  flowId String
  userId String

  accessLevel FlowAccessLevel @default(EDITOR)

  canEdit    Boolean @default(true)
  canExecute Boolean @default(true)
  canDelete  Boolean @default(false)
  canShare   Boolean @default(false)
  canInvite  Boolean @default(false)

  invitedBy    String?
  invitedAt    DateTime  @default(now()) @db.Timestamptz(6)
  lastViewedAt DateTime? @db.Timestamptz(6)

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([flowId, userId])
  @@index([userId])
  @@index([flowId, accessLevel])
  @@schema("canvas")
}

model FlowSession {
  id     String  @id @default(cuid())
  flowId String
  userId String?

  anonymousName String? @db.VarChar(100)
  sessionToken  String? @unique @db.VarChar(255)

  socketId       String? @db.VarChar(255)
  cursorPosition Json?
  selectedPodIds Json?
  viewportState  Json?

  userColor String? @db.VarChar(7)

  userAgent String? @db.VarChar(500)
  ipAddress String? @db.VarChar(45)

  connectedAt     DateTime  @default(now()) @db.Timestamptz(6)
  lastHeartbeatAt DateTime  @default(now()) @db.Timestamptz(6)
  disconnectedAt  DateTime? @db.Timestamptz(6)

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId, disconnectedAt])
  @@index([socketId])
  @@index([flowId, userId, disconnectedAt])
  @@index([lastHeartbeatAt])
  @@index([sessionToken])
  @@schema("canvas")
}

model FlowActivityLog {
  id     String  @id @default(cuid())
  flowId String
  userId String?

  action FlowActivityAction

  entityType String? @db.VarChar(50)
  entityId   String? @db.VarChar(255)

  changeData Json?

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([action, createdAt(sort: Desc)])
  @@schema("canvas")
}

model FlowComment {
  id     String  @id @default(cuid())
  flowId String
  userId String?

  content  String  @db.Text
  position Json?
  podId    String?

  parentId String?

  isResolved Boolean   @default(false)
  resolvedBy String?
  resolvedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([podId])
  @@index([parentId])
  @@index([isResolved])
  @@schema("canvas")
}

model Pod {
  id              String             @id @default(cuid())
  flowId          String
  type            PodType
  position        Json
  executionStatus PodExecutionStatus @default(IDLE)
  lastExecutionId String?
  contextFlowId   String?
  documentId      String?

  lockedBy String?
  lockedAt DateTime? @db.Timestamptz(6)

  dynamoPartitionKey String @db.VarChar(255)
  dynamoSortKey      String @db.VarChar(255)

  s3VectorBucket String? @db.VarChar(255)
  s3VectorKey    String? @db.VarChar(512)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  flow        Flow           @relation(fields: [flowId], references: [id], onDelete: Cascade)
  contextFlow Flow?          @relation("FlowAsContext", fields: [contextFlowId], references: [id], onDelete: SetNull)
  document    Document?      @relation(fields: [documentId], references: [id], onDelete: SetNull)
  sourceEdges Edge[]         @relation("SourcePod")
  targetEdges Edge[]         @relation("TargetPod")
  executions  PodExecution[]
  usageLogs   PodUsageLog[]

  @@unique([dynamoPartitionKey, dynamoSortKey])
  @@index([flowId, type, executionStatus])
  @@index([contextFlowId])
  @@index([documentId])
  @@index([executionStatus, updatedAt])
  @@index([s3VectorBucket, s3VectorKey])
  @@index([lockedBy, lockedAt])
  @@schema("canvas")
}

model Edge {
  id           String   @id @default(cuid())
  flowId       String
  sourcePodId  String
  targetPodId  String
  sourceHandle String?  @db.VarChar(100)
  targetHandle String?  @db.VarChar(100)
  animated     Boolean  @default(false)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  flow      Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  sourcePod Pod  @relation("SourcePod", fields: [sourcePodId], references: [id], onDelete: Cascade)
  targetPod Pod  @relation("TargetPod", fields: [targetPodId], references: [id], onDelete: Cascade)

  @@unique([flowId, sourcePodId, sourceHandle, targetPodId, targetHandle])
  @@index([flowId])
  @@index([sourcePodId])
  @@index([targetPodId])
  @@schema("canvas")
}

model PodExecution {
  id          String             @id @default(cuid())
  podId       String
  flowId      String
  workspaceId String
  status      PodExecutionStatus @default(RUNNING)
  startedAt   DateTime           @default(now()) @db.Timestamptz(6)
  finishedAt  DateTime?          @db.Timestamptz(6)
  runtimeInMs Int?

  provider  LLMProvider
  modelId   String      @db.VarChar(255)
  modelName String?     @db.VarChar(255)

  providerMetadata Json?
  requestMetadata  Json?
  responseMetadata Json?

  errorMessage String? @db.Text
  errorCode    String? @db.VarChar(100)

  inputTokens     Int @default(0)
  outputTokens    Int @default(0)
  reasoningTokens Int @default(0)

  creditsConsumed Int @default(0)

  costInUsd Decimal? @db.Decimal(12, 8)

  pod Pod @relation(fields: [podId], references: [id], onDelete: Cascade)

  @@index([podId, startedAt(sort: Desc)])
  @@index([workspaceId, status, startedAt(sort: Desc)])
  @@index([flowId, status, startedAt(sort: Desc)])
  @@index([status, startedAt])
  @@index([provider, modelId, startedAt(sort: Desc)])
  @@index([provider, status])
  @@schema("canvas")
}

model PodUsageLog {
  id             String @id @default(cuid())
  podId          String
  executionId    String
  flowId         String
  workspaceId    String
  subscriptionId String

  provider  LLMProvider
  modelId   String      @db.VarChar(255)
  modelName String?     @db.VarChar(255)

  providerMetadata Json?

  inputTokens     Int  @default(0)
  outputTokens    Int  @default(0)
  reasoningTokens Int  @default(0)
  creditsConsumed Int  @default(0)
  runtimeInMs     Int?

  inputTokenCost     Decimal @db.Decimal(12, 8)
  outputTokenCost    Decimal @db.Decimal(12, 8)
  reasoningTokenCost Decimal @db.Decimal(12, 8)
  totalCostInUsd     Decimal @db.Decimal(12, 8)

  executedAt DateTime @default(now()) @db.Timestamptz(6)

  pod          Pod          @relation(fields: [podId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([workspaceId, executedAt(sort: Desc)])
  @@index([subscriptionId, executedAt(sort: Desc)])
  @@index([executionId])
  @@index([podId, executedAt(sort: Desc)])
  @@index([flowId, executedAt(sort: Desc)])
  @@index([provider, modelId, executedAt(sort: Desc)])
  @@index([provider, executedAt(sort: Desc)])
  @@schema("canvas")
}

model ContextModule {
  id             String   @id @default(cuid())
  workspaceId    String
  name           String   @db.VarChar(255)
  description    String?  @db.VarChar(1000)
  definitionJson Json
  originalFlowId String?
  version        Int      @default(1)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)

  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  originalFlow Flow?     @relation("FlowOriginal", fields: [originalFlowId], references: [id], onDelete: SetNull)

  @@index([workspaceId, updatedAt(sort: Desc)])
  @@index([originalFlowId])
  @@schema("canvas")
}

enum PodType {
  TEXT_INPUT
  DOCUMENT_INPUT
  URL_INPUT
  IMAGE_INPUT
  VIDEO_INPUT
  AUDIO_INPUT
  LLM_PROMPT
  EMBEDDING_POD
  TOOL_POD
  TEXT_OUTPUT
  IMAGE_OUTPUT
  VIDEO_OUTPUT
  AUDIO_OUTPUT
  CONTEXT_MODULE
  FLOW_CONTEXT_INPUT
  CODE_EXECUTION

  @@schema("canvas")
}

enum PodExecutionStatus {
  IDLE
  QUEUED
  RUNNING
  PAUSED
  COMPLETED
  ERROR
  CANCELLED

  @@schema("canvas")
}

enum FlowVisibility {
  PRIVATE
  WORKSPACE
  PUBLIC

  @@schema("canvas")
}

enum FlowAccessLevel {
  VIEWER
  COMMENTER
  EDITOR
  OWNER

  @@schema("canvas")
}

enum FlowActivityAction {
  FLOW_CREATED
  FLOW_UPDATED
  FLOW_DELETED
  FLOW_SHARED
  FLOW_VISIBILITY_CHANGED
  POD_CREATED
  POD_UPDATED
  POD_DELETED
  POD_MOVED
  POD_EXECUTED
  POD_LOCKED
  POD_UNLOCKED
  EDGE_CREATED
  EDGE_DELETED
  COLLABORATOR_ADDED
  COLLABORATOR_REMOVED
  COLLABORATOR_PERMISSIONS_CHANGED
  COMMENT_ADDED
  COMMENT_RESOLVED
  USER_JOINED
  USER_LEFT

  @@schema("canvas")
}

// /prisma/schemas/core.prisma

// ==========================================
// CORE SCHEMA - Users, Auth, Workspaces
// ==========================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  hash      String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  accounts                 Account[]
  workspaces               WorkspaceUser[]
  refreshTokens            RefreshToken[]
  flowCollaborations       FlowCollaborator[]
  sentWorkspaceInvites     WorkspaceInvitation[] @relation("InvitedBy")
  receivedWorkspaceInvites WorkspaceInvitation[] @relation("InvitedUser")
  sentFlowInvites          FlowInvitation[]      @relation("FlowInvitedBy")
  receivedFlowInvites      FlowInvitation[]      @relation("FlowInvitedUser")

  @@index([email])
  @@schema("core")
}

model RefreshToken {
  id         String   @id @default(cuid())
  token      String   @unique
  deviceName String   @db.VarChar(255)
  userId     String
  expiresAt  DateTime @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceName])
  @@index([userId, expiresAt])
  @@index([token, expiresAt])
  @@schema("core")
}

model Account {
  id                String       @id @default(cuid())
  userId            String
  provider          AuthProvider
  providerAccountId String
  accessToken       String?      @db.Text
  refreshToken      String?      @db.Text
  expiresAt         DateTime?    @db.Timestamptz(6)
  createdAt         DateTime     @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@schema("core")
}

model Workspace {
  id        String        @id @default(cuid())
  name      String        @db.VarChar(255)
  type      WorkspaceType @default(PERSONAL)
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt DateTime      @updatedAt @db.Timestamptz(6)

  members         WorkspaceUser[]
  spaces          Space[]
  flows           Flow[]
  documents       Document[]
  documentFolders DocumentFolder[]
  subscription    Subscription?
  contextModules  ContextModule[]
  shareLinks      ShareLink[]
  apiKeys         ProviderAPIKey[]
  invitations     WorkspaceInvitation[]

  @@index([type, createdAt])
  @@schema("core")
}

model WorkspaceUser {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)

  canCreateCanvas  Boolean @default(true)
  canDeleteCanvas  Boolean @default(false)
  canManageBilling Boolean @default(false)
  canInviteMembers Boolean @default(false)
  canManageMembers Boolean @default(false)
  canManageApiKeys Boolean @default(false)

  joinedAt  DateTime @default(now()) @db.Timestamptz(6)
  invitedBy String?

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId, role])
  @@index([userId])
  @@schema("core")
}

model WorkspaceInvitation {
  id          String        @id @default(cuid())
  workspaceId String
  email       String        @db.VarChar(255)
  role        WorkspaceRole @default(MEMBER)
  permissions Json?

  invitedBy     String
  invitedUserId String?

  token  String           @unique @db.VarChar(255)
  status InvitationStatus @default(PENDING)

  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime  @db.Timestamptz(6)
  acceptedAt DateTime? @db.Timestamptz(6)

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  inviter     User      @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  invitedUser User?     @relation("InvitedUser", fields: [invitedUserId], references: [id], onDelete: SetNull)

  @@index([workspaceId, status])
  @@index([email, status])
  @@index([token, expiresAt])
  @@schema("core")
}

model ProviderAPIKey {
  id          String      @id @default(cuid())
  workspaceId String
  provider    LLMProvider
  displayName String      @db.VarChar(100)

  keyHash String @db.VarChar(255)

  providerConfig Json?
  endpoint       String?  @db.VarChar(500)
  authType       AuthType @default(BEARER_TOKEN)

  isActive   Boolean   @default(true)
  lastUsedAt DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime? @db.Timestamptz(6)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, provider, displayName])
  @@index([workspaceId, isActive])
  @@index([provider, isActive])
  @@schema("core")
}

model ShareLink {
  id          String             @id @default(cuid())
  publicToken String             @unique @default(cuid())
  assetType   ShareableAssetType
  assetId     String
  workspaceId String
  createdBy   String

  accessLevel ShareAccessLevel @default(VIEW_ONLY)
  password    String?          @db.VarChar(255)

  viewCount    Int       @default(0)
  lastViewedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt DateTime? @db.Timestamptz(6)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([assetType, assetId])
  @@index([publicToken, expiresAt])
  @@index([workspaceId, assetType])
  @@index([createdBy, createdAt])
  @@schema("core")
}

enum AuthProvider {
  GOOGLE
  GITHUB
  EMAIL

  @@schema("core")
}

enum WorkspaceType {
  PERSONAL
  TEAM

  @@schema("core")
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER

  @@schema("core")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  REVOKED

  @@schema("core")
}

enum ShareAccessLevel {
  VIEW_ONLY
  COMMENT
  EDIT

  @@schema("core")
}

enum LLMProvider {
  OPENAI
  ANTHROPIC
  GOOGLE_GEMINI
  PERPLEXITY
  MISTRAL
  META_AI
  XAI
  DEEPSEEK
  COHERE
  GROQ
  TOGETHER
  REPLICATE
  HUGGINGFACE
  OPENROUTER
  BEDROCK
  OLLAMA
  VLLM
  LLAMACPP
  TEXTGEN_WEBUI
  CUSTOM

  @@schema("core")
}

enum AuthType {
  BEARER_TOKEN
  API_KEY_HEADER
  BASIC_AUTH
  OAUTH2
  AWS_SIGV4
  CUSTOM_HEADER

  @@schema("core")
}

enum ShareableAssetType {
  FLOW
  CONTEXT_MODULE

  @@schema("core")
}

// /prisma/schemas/documents.prisma

// ==========================================
// DOCUMENTS SCHEMA - File Storage, Embeddings & Processing
// ==========================================

// Document Folders (like Google Drive folders)
model DocumentFolder {
  id          String @id @default(cuid())
  workspaceId String
  name        String @db.VarChar(255)

  // Self-referential for nested folders (folder within folder)
  parentId String?
  parent   DocumentFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children DocumentFolder[] @relation("FolderHierarchy")

  icon  String? @db.VarChar(50)
  color String? @db.VarChar(7)

  sortOrder Int @default(0)

  createdBy String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  documents Document[] // Documents in this folder

  @@unique([workspaceId, parentId, name])
  @@index([workspaceId, parentId, sortOrder])
  @@index([parentId, sortOrder])
  @@schema("documents")
}

model Document {
  id          String  @id @default(cuid())
  workspaceId String
  folderId    String? // Optional folder location
  name        String  @db.VarChar(255)

  sourceType DocumentSourceType @default(INTERNAL)

  // For INTERNAL (uploaded files)
  storageKey String? @unique @db.VarChar(512)
  s3Bucket   String? @db.VarChar(255)

  // For EXTERNAL (YouTube, Google Drive, URLs, etc.)
  externalUrl      String? @db.VarChar(2048)
  externalProvider String? @db.VarChar(50)
  externalFileId   String? @db.VarChar(512)

  fileType    String         @db.VarChar(100)
  mimeType    String?        @db.VarChar(255)
  sizeInBytes BigInt?
  status      DocumentStatus @default(UPLOADING)
  uploadedBy  String?

  metadata Json? // Store thumbnails, duration, channel info, etc.

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace             Workspace                @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  folder                DocumentFolder?          @relation(fields: [folderId], references: [id], onDelete: SetNull)
  embeddings            Embedding[]
  pods                  Pod[]
  processingCostRecords DocumentProcessingCost[]

  @@index([workspaceId, folderId, status, createdAt(sort: Desc)])
  @@index([workspaceId, status, createdAt(sort: Desc)])
  @@index([workspaceId, sourceType, createdAt(sort: Desc)])
  @@index([folderId, createdAt(sort: Desc)])
  @@index([storageKey])
  @@index([status, updatedAt])
  @@index([fileType, workspaceId])
  @@index([externalProvider, externalFileId])
  @@schema("documents")
}

model Embedding {
  id         String @id @default(cuid())
  documentId String
  model      String @db.VarChar(100)
  chunkIndex Int
  chunkText  String @db.Text

  // S3 Vectors - AWS S3 storage (NOT pgvector)
  s3VectorBucket  String @db.VarChar(255)
  s3VectorKey     String @db.VarChar(512)
  vectorDimension Int    @default(1536)

  metadata Json?

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex])
  @@unique([s3VectorBucket, s3VectorKey])
  @@index([documentId, createdAt(sort: Desc)])
  @@index([model, createdAt(sort: Desc)])
  @@index([s3VectorBucket])
  @@schema("documents")
}

model DocumentProcessingCost {
  id             String @id @default(cuid())
  documentId     String
  workspaceId    String
  subscriptionId String

  processingType DocumentProcessingType

  creditsConsumed Int @default(0)

  // Cost breakdown
  extractionCost Decimal @default(0) @db.Decimal(12, 8) // YouTube transcript, OCR, etc.
  embeddingCost  Decimal @default(0) @db.Decimal(12, 8) // Embedding generation cost
  totalCostInUsd Decimal @db.Decimal(12, 8)

  // Processing stats
  chunkCount       Int?
  embeddingModel   String? @db.VarChar(100)
  processingTimeMs Int?
  tokensProcessed  Int     @default(0)

  processedAt DateTime @default(now()) @db.Timestamptz(6)

  document     Document     @relation(fields: [documentId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([documentId, processedAt(sort: Desc)])
  @@index([workspaceId, processedAt(sort: Desc)])
  @@index([subscriptionId, processedAt(sort: Desc)])
  @@index([processingType, processedAt(sort: Desc)])
  @@schema("documents")
}

enum DocumentStatus {
  UPLOADING
  PROCESSING
  READY
  ERROR
  ARCHIVED

  @@schema("documents")
}

enum DocumentSourceType {
  INTERNAL
  GOOGLE_DRIVE
  YOUTUBE
  VIMEO
  LOOM
  URL

  @@schema("documents")
}

enum DocumentProcessingType {
  PDF_TEXT_EXTRACTION
  IMAGE_OCR
  VIDEO_TRANSCRIPT // YouTube, Vimeo, Loom
  AUDIO_TRANSCRIPT
  DOCUMENT_EMBEDDING // General embedding generation
  URL_SCRAPING
  VISION_EXTRACTION // Image description via GPT-4V/Claude Vision

  @@schema("documents")
}

// /prisma/schema.prisma

// This is your main Prisma schema file.
// It defines the database connection and the Prisma Client generator.
// Models are organized into separate files for better maintainability.

generator client {
  provider        = "prisma-client-js"
  output          = "../client"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["core", "canvas", "billing", "documents", "admin"]
}
