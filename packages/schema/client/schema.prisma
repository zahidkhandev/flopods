// ==========================================
// ADMIN SCHEMA - Admin Panel & Security
// ==========================================

model Admin {
  id           String @id @default(cuid())
  email        String @unique
  username     String @unique @db.VarChar(50)
  passwordHash String @db.VarChar(255)

  role         AdminRole   @default(SUPPORT)
  status       AdminStatus @default(PENDING)
  isSuperAdmin Boolean     @default(false)

  // MFA
  requiresMfa    Boolean   @default(true)
  mfaSecret      String?   @db.VarChar(255)
  mfaBackupCodes Json?
  mfaVerifiedAt  DateTime? @db.Timestamptz(6)

  // IP whitelisting
  allowedIpAddresses Json?

  // Session tracking
  lastLoginAt         DateTime? @db.Timestamptz(6)
  lastLoginIp         String?   @db.VarChar(45)
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime? @db.Timestamptz(6)

  // Password management
  passwordChangedAt   DateTime? @db.Timestamptz(6)
  passwordResetToken  String?   @unique @db.VarChar(255)
  passwordResetExpiry DateTime? @db.Timestamptz(6)

  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(6)
  createdBy     String?
  deactivatedAt DateTime? @db.Timestamptz(6)
  deactivatedBy String?

  sessions    AdminSession[]
  auditLogs   AdminAuditLog[]
  permissions AdminPermission[]
  apiKeys     AdminAPIKey[]
  invitations AdminInvitation[] @relation("InvitedBy")

  @@index([email, status])
  @@index([username])
  @@index([status, role])
  @@index([lastLoginAt])
  @@schema("admin")
}

model AdminSession {
  id                String  @id @default(cuid())
  adminId           String
  token             String  @unique @db.VarChar(255)
  refreshToken      String? @unique @db.VarChar(255)
  ipAddress         String  @db.VarChar(45)
  userAgent         String  @db.VarChar(500)
  deviceFingerprint String? @db.VarChar(255)

  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt      DateTime  @db.Timestamptz(6)
  lastActivityAt DateTime  @default(now()) @db.Timestamptz(6)
  revokedAt      DateTime? @db.Timestamptz(6)
  revokedReason  String?   @db.VarChar(255)

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId, revokedAt, expiresAt])
  @@index([token])
  @@index([expiresAt])
  @@index([ipAddress, createdAt])
  @@schema("admin")
}

model AdminAuditLog {
  id              String        @id @default(cuid())
  adminId         String?
  action          AdminAction
  resource        AdminResource
  resourceId      String?       @db.VarChar(255)
  method          String        @db.VarChar(10)
  endpoint        String        @db.VarChar(500)
  ipAddress       String        @db.VarChar(45)
  userAgent       String?       @db.VarChar(500)
  changesBefore   Json?
  changesAfter    Json?
  status          Int
  errorMessage    String?       @db.Text
  metadata        Json?
  executionTimeMs Int?
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)

  admin Admin? @relation(fields: [adminId], references: [id], onDelete: SetNull)

  @@index([adminId, createdAt(sort: Desc)])
  @@index([action, createdAt(sort: Desc)])
  @@index([resource, resourceId])
  @@index([ipAddress, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@schema("admin")
}

model AdminPermission {
  id         String             @id @default(cuid())
  adminId    String
  permission SpecificPermission
  resource   AdminResource?
  grantedAt  DateTime           @default(now()) @db.Timestamptz(6)
  grantedBy  String?
  expiresAt  DateTime?          @db.Timestamptz(6)

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([adminId, permission, resource])
  @@index([adminId])
  @@index([permission, resource])
  @@index([expiresAt])
  @@schema("admin")
}

model AdminAPIKey {
  id         String @id @default(cuid())
  adminId    String
  name       String @db.VarChar(100)
  keyHash    String @unique @db.VarChar(255)
  keyPrefix  String @db.VarChar(20)
  scopes     Json
  rateLimit  Int?
  allowedIps Json?

  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  lastUsedAt DateTime? @db.Timestamptz(6)
  expiresAt  DateTime? @db.Timestamptz(6)
  revokedAt  DateTime? @db.Timestamptz(6)

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([keyHash])
  @@index([expiresAt, revokedAt])
  @@schema("admin")
}

model AdminInvitation {
  id         String    @id @default(cuid())
  email      String    @db.VarChar(255)
  role       AdminRole
  token      String    @unique @db.VarChar(255)
  invitedBy  String
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime  @db.Timestamptz(6)
  acceptedAt DateTime? @db.Timestamptz(6)

  inviter Admin @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@index([token, expiresAt])
  @@index([email])
  @@schema("admin")
}

model AdminSecurityEvent {
  id          String            @id @default(cuid())
  eventType   SecurityEventType
  severity    SecuritySeverity
  adminId     String?
  ipAddress   String            @db.VarChar(45)
  userAgent   String?           @db.VarChar(500)
  description String            @db.Text
  metadata    Json?
  resolved    Boolean           @default(false)
  resolvedAt  DateTime?         @db.Timestamptz(6)
  resolvedBy  String?
  createdAt   DateTime          @default(now()) @db.Timestamptz(6)

  @@index([eventType, severity, createdAt(sort: Desc)])
  @@index([adminId, createdAt(sort: Desc)])
  @@index([resolved, severity])
  @@index([ipAddress, createdAt(sort: Desc)])
  @@schema("admin")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  FINANCE
  SUPPORT
  DEVELOPER
  ANALYST

  @@schema("admin")
}

enum AdminStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DEACTIVATED
  LOCKED

  @@schema("admin")
}

enum AdminAction {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_SUSPENDED
  WORKSPACE_DELETED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELLED
  CREDITS_ADDED
  CREDITS_REMOVED
  REFUND_ISSUED
  MODEL_ADDED
  MODEL_UPDATED
  PRICING_CHANGED
  ADMIN_INVITED
  ADMIN_CREATED
  ADMIN_ROLE_CHANGED
  PERMISSION_GRANTED
  SESSION_REVOKED
  CONFIG_CHANGED
  DATA_EXPORTED

  @@schema("admin")
}

enum AdminResource {
  USER
  WORKSPACE
  SUBSCRIPTION
  CREDIT
  MODEL
  ADMIN
  PERMISSION
  SESSION
  API_KEY
  CANVAS
  ACTION_POD
  DOCUMENT
  AUDIT_LOG
  SYSTEM_CONFIG

  @@schema("admin")
}

enum SpecificPermission {
  USER_VIEW
  USER_UPDATE
  USER_DELETE
  USER_SUSPEND
  WORKSPACE_VIEW
  WORKSPACE_DELETE
  BILLING_VIEW
  BILLING_MANAGE
  CREDITS_MANAGE
  REFUND_ISSUE
  MODEL_VIEW
  MODEL_MANAGE
  PRICING_MANAGE
  ADMIN_VIEW
  ADMIN_INVITE
  ADMIN_MANAGE
  SYSTEM_CONFIG_VIEW
  SYSTEM_CONFIG_MANAGE
  AUDIT_LOG_VIEW
  AUDIT_LOG_EXPORT
  DATA_EXPORT
  DATA_DELETE

  @@schema("admin")
}

enum SecurityEventType {
  FAILED_LOGIN
  MULTIPLE_FAILED_LOGINS
  SUSPICIOUS_IP
  ACCOUNT_LOCKED
  MFA_FAILED
  UNAUTHORIZED_ACCESS_ATTEMPT

  @@schema("admin")
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@schema("admin")
}

// ==========================================
// BILLING SCHEMA - Subscriptions & Pricing
// ==========================================

model Subscription {
  id          String             @id @default(cuid())
  workspaceId String             @unique
  tier        SubscriptionTier   @default(HOBBYIST)
  status      SubscriptionStatus @default(ACTIVE)

  // Stripe integration
  stripeCustomerId     String? @unique
  stripeSubscriptionId String? @unique

  // Canvas Credits
  credits            Int       @default(0)
  monthlyCreditQuota Int       @default(0)
  creditResetDate    DateTime? @db.Timestamptz(6)

  // Usage limits per tier
  maxCanvases               Int @default(3) // HOBBYIST: 3, PRO: 999
  maxActionPodsPerCanvas    Int @default(50) // HOBBYIST: 50, PRO: 999
  maxDocumentSizeInMB       Int @default(10) // HOBBYIST: 10MB, PRO: 100MB
  maxCollaboratorsPerCanvas Int @default(0) // HOBBYIST: 0, PRO: 10, TEAM: 999

  // Feature flags
  canInviteToWorkspace Boolean @default(false) // PRO/TEAM only
  canInviteToCanvas    Boolean @default(false) // PRO/TEAM only
  canCreatePublicLinks Boolean @default(true) // All tiers
  canUseAdvancedModels Boolean @default(false) // HOBBYIST: BYOK only
  canAccessAnalytics   Boolean @default(false) // PRO/TEAM only
  canExportData        Boolean @default(false) // PRO/TEAM only

  // Billing cycle
  nextBillingDate    DateTime? @db.Timestamptz(6)
  currentPeriodStart DateTime? @db.Timestamptz(6)
  currentPeriodEnd   DateTime? @db.Timestamptz(6)
  cancelAtPeriodEnd  Boolean   @default(false)

  // BYOK mode
  isByokMode Boolean @default(false)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  usageLogs       PodUsageLog[]
  creditPurchases CreditPurchase[]
  creditUsage     CreditUsageLog[]

  @@index([status, nextBillingDate])
  @@index([tier, status])
  @@index([creditResetDate])
  @@schema("billing")
}

model CreditPurchase {
  id               String   @id @default(cuid())
  subscriptionId   String
  creditsPurchased Int
  amountPaid       Decimal  @db.Decimal(10, 2)
  currency         String   @default("USD") @db.VarChar(3)
  stripeChargeId   String   @unique
  status           String   @default("succeeded") @db.VarChar(50)
  purchasedAt      DateTime @default(now()) @db.Timestamptz(6)

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, purchasedAt(sort: Desc)])
  @@index([stripeChargeId])
  @@schema("billing")
}

model CreditUsageLog {
  id             String @id @default(cuid())
  subscriptionId String
  workspaceId    String
  canvasId       String
  podId          String
  executionId    String

  creditsUsed   Int @default(0)
  balanceBefore Int
  balanceAfter  Int

  provider  LLMProvider
  modelId   String      @db.VarChar(255)
  modelName String?     @db.VarChar(255)

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, createdAt(sort: Desc)])
  @@index([workspaceId, createdAt(sort: Desc)])
  @@index([executionId])
  @@index([provider, modelId, createdAt(sort: Desc)])
  @@schema("billing")
}

model ModelPricingTier {
  id       String        @id @default(cuid())
  provider LLMProvider
  modelId  String        @db.VarChar(255)
  category ModelCategory

  displayName String  @db.VarChar(255)
  description String? @db.VarChar(500)

  inputTokenCost     Decimal @db.Decimal(12, 8)
  outputTokenCost    Decimal @db.Decimal(12, 8)
  reasoningTokenCost Decimal @default(0) @db.Decimal(12, 8)

  creditsPerMillionInputTokens     Int
  creditsPerMillionOutputTokens    Int
  creditsPerMillionReasoningTokens Int @default(0)

  maxTokens            Int?
  maxOutputTokens      Int?
  supportsStreaming    Boolean @default(true)
  supportsVision       Boolean @default(false)
  supportsAudio        Boolean @default(false)
  supportsVideo        Boolean @default(false)
  supportsFunctions    Boolean @default(false)
  supportsJsonMode     Boolean @default(false)
  supportsSystemPrompt Boolean @default(true)

  providerConfig Json?

  isActive       Boolean   @default(true)
  effectiveFrom  DateTime  @db.Timestamptz(6)
  effectiveUntil DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([provider, modelId, effectiveFrom])
  @@index([provider, modelId, isActive, effectiveFrom])
  @@index([provider, category, isActive])
  @@index([isActive, effectiveFrom])
  @@index([category, isActive])
  @@schema("billing")
}

enum SubscriptionTier {
  HOBBYIST // FREE
  PRO // $20/month
  TEAM // $50/user/month

  @@schema("billing")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIALING
  INCOMPLETE
  PAUSED

  @@schema("billing")
}

enum ModelCategory {
  WORKHORSE
  POWERHOUSE
  REASONING
  SPECIALIST
  IMAGE_GEN
  VIDEO_GEN
  AUDIO_GEN
  EMBEDDING
  RERANKING
  MODERATION
  SEARCH
  TRANSLATION

  @@schema("billing")
}

model Canvas {
  id          String           @id @default(cuid())
  workspaceId String
  name        String           @db.VarChar(255)
  description String?          @db.VarChar(500)
  version     Int              @default(1)
  visibility  CanvasVisibility @default(PRIVATE)

  createdBy String

  // Thumbnail for sharing (S3 key)
  thumbnailS3Key       String?   @db.VarChar(512)
  thumbnailGeneratedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace      Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  actionPods     ActionPod[]
  edges          Edge[]
  contextualPods ActionPod[]          @relation("CanvasAsContext")
  contextModules ContextModule[]      @relation("CanvasOriginal")
  collaborators  CanvasCollaborator[]
  invitations    CanvasInvitation[]
  sessions       CanvasSession[]
  activityLog    CanvasActivityLog[]
  comments       CanvasComment[]

  @@index([workspaceId, updatedAt(sort: Desc)])
  @@index([workspaceId, createdAt(sort: Desc)])
  @@index([workspaceId, visibility])
  @@index([createdBy, createdAt(sort: Desc)])
  @@schema("canvas")
}

model CanvasInvitation {
  id       String @id @default(cuid())
  canvasId String
  email    String @db.VarChar(255)

  accessLevel CanvasAccessLevel @default(EDITOR)
  permissions Json? // Custom permission overrides

  invitedBy     String
  invitedUserId String?

  token  String           @unique @db.VarChar(255)
  status InvitationStatus @default(PENDING)

  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime  @db.Timestamptz(6)
  acceptedAt DateTime? @db.Timestamptz(6)

  canvas      Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  inviter     User   @relation("CanvasInvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  invitedUser User?  @relation("CanvasInvitedUser", fields: [invitedUserId], references: [id], onDelete: SetNull)

  @@index([canvasId, status])
  @@index([email, status])
  @@index([token, expiresAt])
  @@schema("canvas")
}

model CanvasCollaborator {
  id       String @id @default(cuid())
  canvasId String
  userId   String

  accessLevel CanvasAccessLevel @default(EDITOR)

  // Granular permissions
  canEdit    Boolean @default(true)
  canExecute Boolean @default(true)
  canDelete  Boolean @default(false)
  canShare   Boolean @default(false) // Can create public links (FREE)
  canInvite  Boolean @default(false) // Can invite collaborators (PAID)

  invitedBy    String?
  invitedAt    DateTime  @default(now()) @db.Timestamptz(6)
  lastViewedAt DateTime? @db.Timestamptz(6)

  canvas Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([canvasId, userId])
  @@index([userId])
  @@index([canvasId, accessLevel])
  @@schema("canvas")
}

model CanvasSession {
  id       String  @id @default(cuid())
  canvasId String
  userId   String? // null for anonymous viewers

  // Anonymous session support
  anonymousName String? @db.VarChar(100)
  sessionToken  String? @unique @db.VarChar(255)

  // Real-time presence
  socketId       String? @db.VarChar(255)
  cursorPosition Json? // {x: number, y: number}
  selectedPodIds Json? // Array of selected action pod IDs
  viewportState  Json? // {zoom: number, x: number, y: number}

  userColor String? @db.VarChar(7) // Hex color for cursor

  // Session metadata
  userAgent String? @db.VarChar(500)
  ipAddress String? @db.VarChar(45)

  // Lifecycle
  connectedAt     DateTime  @default(now()) @db.Timestamptz(6)
  lastHeartbeatAt DateTime  @default(now()) @db.Timestamptz(6)
  disconnectedAt  DateTime? @db.Timestamptz(6)

  canvas Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)

  @@index([canvasId, disconnectedAt])
  @@index([socketId])
  @@index([canvasId, userId, disconnectedAt])
  @@index([lastHeartbeatAt]) // For stale session cleanup
  @@index([sessionToken])
  @@schema("canvas")
}

model CanvasActivityLog {
  id       String  @id @default(cuid())
  canvasId String
  userId   String? // null for anonymous

  action CanvasActivityAction

  entityType String? @db.VarChar(50) // 'action_pod', 'edge', 'canvas'
  entityId   String? @db.VarChar(255)

  changeData Json? // {before: {...}, after: {...}}

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  canvas Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)

  @@index([canvasId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([action, createdAt(sort: Desc)])
  @@schema("canvas")
}

model CanvasComment {
  id       String  @id @default(cuid())
  canvasId String
  userId   String?

  content  String  @db.Text
  position Json? // {x: number, y: number}
  podId    String? // Attached to specific pod

  parentId String? // Thread support

  isResolved Boolean   @default(false)
  resolvedBy String?
  resolvedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  canvas Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)

  @@index([canvasId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([podId])
  @@index([parentId])
  @@index([isResolved])
  @@schema("canvas")
}

model ActionPod {
  id              String                   @id @default(cuid())
  canvasId        String
  type            ActionPodType
  position        Json
  executionStatus ActionPodExecutionStatus @default(IDLE)
  lastExecutionId String?
  contextCanvasId String?
  documentId      String?

  // Real-time collaboration lock
  lockedBy String? // userId or sessionToken
  lockedAt DateTime? @db.Timestamptz(6)

  // DynamoDB keys for pod content
  dynamoPartitionKey String @db.VarChar(255) // "WORKSPACE#{workspaceId}"
  dynamoSortKey      String @db.VarChar(255) // "CANVAS#{canvasId}#POD#{podId}#{ts}"

  // S3 Vectors for embeddings
  s3VectorBucket String? @db.VarChar(255)
  s3VectorKey    String? @db.VarChar(512)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  canvas        Canvas               @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  contextCanvas Canvas?              @relation("CanvasAsContext", fields: [contextCanvasId], references: [id], onDelete: SetNull)
  document      Document?            @relation(fields: [documentId], references: [id], onDelete: SetNull)
  sourceEdges   Edge[]               @relation("SourcePod")
  targetEdges   Edge[]               @relation("TargetPod")
  executions    ActionPodExecution[]
  usageLogs     PodUsageLog[]

  @@unique([dynamoPartitionKey, dynamoSortKey])
  @@index([canvasId, type, executionStatus])
  @@index([contextCanvasId])
  @@index([documentId])
  @@index([executionStatus, updatedAt])
  @@index([s3VectorBucket, s3VectorKey])
  @@index([lockedBy, lockedAt])
  @@schema("canvas")
}

model Edge {
  id           String   @id @default(cuid())
  canvasId     String
  sourcePodId  String
  targetPodId  String
  sourceHandle String?  @db.VarChar(100)
  targetHandle String?  @db.VarChar(100)
  animated     Boolean  @default(false)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  canvas    Canvas    @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  sourcePod ActionPod @relation("SourcePod", fields: [sourcePodId], references: [id], onDelete: Cascade)
  targetPod ActionPod @relation("TargetPod", fields: [targetPodId], references: [id], onDelete: Cascade)

  @@unique([canvasId, sourcePodId, sourceHandle, targetPodId, targetHandle])
  @@index([canvasId])
  @@index([sourcePodId])
  @@index([targetPodId])
  @@schema("canvas")
}

model ActionPodExecution {
  id          String                   @id @default(cuid())
  podId       String
  canvasId    String
  workspaceId String
  status      ActionPodExecutionStatus @default(RUNNING)
  startedAt   DateTime                 @default(now()) @db.Timestamptz(6)
  finishedAt  DateTime?                @db.Timestamptz(6)
  runtimeInMs Int?

  provider  LLMProvider
  modelId   String      @db.VarChar(255)
  modelName String?     @db.VarChar(255)

  providerMetadata Json?
  requestMetadata  Json?
  responseMetadata Json?

  errorMessage String? @db.Text
  errorCode    String? @db.VarChar(100)

  inputTokens     Int @default(0)
  outputTokens    Int @default(0)
  reasoningTokens Int @default(0)

  creditsConsumed Int @default(0)

  costInUsd Decimal? @db.Decimal(12, 8)

  pod ActionPod @relation(fields: [podId], references: [id], onDelete: Cascade)

  @@index([podId, startedAt(sort: Desc)])
  @@index([workspaceId, status, startedAt(sort: Desc)])
  @@index([canvasId, status, startedAt(sort: Desc)])
  @@index([status, startedAt])
  @@index([provider, modelId, startedAt(sort: Desc)])
  @@index([provider, status])
  @@schema("canvas")
}

model PodUsageLog {
  id             String @id @default(cuid())
  podId          String
  executionId    String
  canvasId       String
  workspaceId    String
  subscriptionId String

  provider  LLMProvider
  modelId   String      @db.VarChar(255)
  modelName String?     @db.VarChar(255)

  providerMetadata Json?

  inputTokens     Int  @default(0)
  outputTokens    Int  @default(0)
  reasoningTokens Int  @default(0)
  creditsConsumed Int  @default(0)
  runtimeInMs     Int?

  inputTokenCost     Decimal @db.Decimal(12, 8)
  outputTokenCost    Decimal @db.Decimal(12, 8)
  reasoningTokenCost Decimal @db.Decimal(12, 8)
  totalCostInUsd     Decimal @db.Decimal(12, 8)

  executedAt DateTime @default(now()) @db.Timestamptz(6)

  pod          ActionPod    @relation(fields: [podId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([workspaceId, executedAt(sort: Desc)])
  @@index([subscriptionId, executedAt(sort: Desc)])
  @@index([executionId])
  @@index([podId, executedAt(sort: Desc)])
  @@index([canvasId, executedAt(sort: Desc)])
  @@index([provider, modelId, executedAt(sort: Desc)])
  @@index([provider, executedAt(sort: Desc)])
  @@schema("canvas")
}

model ContextModule {
  id               String   @id @default(cuid())
  workspaceId      String
  name             String   @db.VarChar(255)
  description      String?  @db.VarChar(1000)
  definitionJson   Json
  originalCanvasId String?
  version          Int      @default(1)
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @db.Timestamptz(6)

  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  originalCanvas Canvas?   @relation("CanvasOriginal", fields: [originalCanvasId], references: [id], onDelete: SetNull)

  @@index([workspaceId, updatedAt(sort: Desc)])
  @@index([originalCanvasId])
  @@schema("canvas")
}

enum ActionPodType {
  TEXT_INPUT
  DOCUMENT_INPUT
  URL_INPUT
  IMAGE_INPUT
  VIDEO_INPUT
  AUDIO_INPUT
  LLM_PROMPT
  EMBEDDING_POD
  TOOL_POD
  TEXT_OUTPUT
  IMAGE_OUTPUT
  VIDEO_OUTPUT
  AUDIO_OUTPUT
  CONTEXT_MODULE
  CANVAS_CONTEXT_INPUT
  CODE_EXECUTION

  @@schema("canvas")
}

enum ActionPodExecutionStatus {
  IDLE
  QUEUED
  RUNNING
  PAUSED
  COMPLETED
  ERROR
  CANCELLED

  @@schema("canvas")
}

enum CanvasVisibility {
  PRIVATE
  WORKSPACE
  PUBLIC // FREE FEATURE

  @@schema("canvas")
}

enum CanvasAccessLevel {
  VIEWER
  COMMENTER
  EDITOR
  OWNER

  @@schema("canvas")
}

enum CanvasActivityAction {
  CANVAS_CREATED
  CANVAS_UPDATED
  CANVAS_DELETED
  CANVAS_SHARED
  CANVAS_VISIBILITY_CHANGED

  POD_CREATED
  POD_UPDATED
  POD_DELETED
  POD_MOVED
  POD_EXECUTED
  POD_LOCKED
  POD_UNLOCKED

  EDGE_CREATED
  EDGE_DELETED

  COLLABORATOR_ADDED
  COLLABORATOR_REMOVED
  COLLABORATOR_PERMISSIONS_CHANGED

  COMMENT_ADDED
  COMMENT_RESOLVED

  USER_JOINED
  USER_LEFT

  @@schema("canvas")
}

// ==========================================
// CORE SCHEMA - Users, Auth, Workspaces
// ==========================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  hash      String?  @db.VarChar(255) // For email authS
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  accounts                 Account[]
  workspaces               WorkspaceUser[]
  refreshTokens            RefreshToken[]
  canvasCollaborations     CanvasCollaborator[]
  sentWorkspaceInvites     WorkspaceInvitation[] @relation("InvitedBy")
  receivedWorkspaceInvites WorkspaceInvitation[] @relation("InvitedUser")
  sentCanvasInvites        CanvasInvitation[]    @relation("CanvasInvitedBy")
  receivedCanvasInvites    CanvasInvitation[]    @relation("CanvasInvitedUser")

  @@index([email])
  @@schema("core")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  deviceId  String   @db.VarChar(255)
  userId    String
  expiresAt DateTime @db.Timestamptz(6)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
  @@index([userId, expiresAt])
  @@index([token, expiresAt])
  @@schema("core")
}

model Account {
  id                String       @id @default(cuid())
  userId            String
  provider          AuthProvider
  providerAccountId String
  accessToken       String?      @db.Text
  refreshToken      String?      @db.Text
  expiresAt         DateTime?    @db.Timestamptz(6)
  createdAt         DateTime     @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@schema("core")
}

model Workspace {
  id        String        @id @default(cuid())
  name      String        @db.VarChar(255)
  type      WorkspaceType @default(PERSONAL)
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt DateTime      @updatedAt @db.Timestamptz(6)

  members        WorkspaceUser[]
  canvases       Canvas[]
  documents      Document[]
  subscription   Subscription?
  contextModules ContextModule[]
  shareLinks     ShareLink[]
  apiKeys        ProviderAPIKey[]
  invitations    WorkspaceInvitation[]

  @@index([type, createdAt])
  @@schema("core")
}

model WorkspaceUser {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)

  // Granular permissions
  canCreateCanvas  Boolean @default(true)
  canDeleteCanvas  Boolean @default(false)
  canManageBilling Boolean @default(false)
  canInviteMembers Boolean @default(false) // Requires PAID plan
  canManageMembers Boolean @default(false)
  canManageApiKeys Boolean @default(false)

  joinedAt  DateTime @default(now()) @db.Timestamptz(6)
  invitedBy String? // userId who invited

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId, role])
  @@index([userId])
  @@schema("core")
}

model WorkspaceInvitation {
  id          String        @id @default(cuid())
  workspaceId String
  email       String        @db.VarChar(255)
  role        WorkspaceRole @default(MEMBER)
  permissions Json? // Custom permissions override

  invitedBy     String
  invitedUserId String? // If user exists in system

  token  String           @unique @db.VarChar(255)
  status InvitationStatus @default(PENDING)

  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime  @db.Timestamptz(6)
  acceptedAt DateTime? @db.Timestamptz(6)

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  inviter     User      @relation("InvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  invitedUser User?     @relation("InvitedUser", fields: [invitedUserId], references: [id], onDelete: SetNull)

  @@index([workspaceId, status])
  @@index([email, status])
  @@index([token, expiresAt])
  @@schema("core")
}

model ProviderAPIKey {
  id          String      @id @default(cuid())
  workspaceId String
  provider    LLMProvider
  displayName String      @db.VarChar(100)

  keyHash String @db.VarChar(255) // Encrypted

  providerConfig Json? // Provider-specific config
  endpoint       String?  @db.VarChar(500)
  authType       AuthType @default(BEARER_TOKEN)

  isActive   Boolean   @default(true)
  lastUsedAt DateTime? @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime? @db.Timestamptz(6)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, provider, displayName])
  @@index([workspaceId, isActive])
  @@index([provider, isActive])
  @@schema("core")
}

model ShareLink {
  id          String             @id @default(cuid())
  publicToken String             @unique @default(cuid())
  assetType   ShareableAssetType
  assetId     String
  workspaceId String
  createdBy   String

  accessLevel ShareAccessLevel @default(VIEW_ONLY)
  password    String?          @db.VarChar(255) // Optional password protection (bcrypt hash)

  // Usage tracking
  viewCount    Int       @default(0)
  lastViewedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt DateTime? @db.Timestamptz(6)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([assetType, assetId])
  @@index([publicToken, expiresAt])
  @@index([workspaceId, assetType])
  @@index([createdBy, createdAt])
  @@schema("core")
}

enum AuthProvider {
  GOOGLE
  GITHUB
  EMAIL

  @@schema("core")
}

enum WorkspaceType {
  PERSONAL
  TEAM

  @@schema("core")
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER

  @@schema("core")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  REVOKED

  @@schema("core")
}

enum ShareAccessLevel {
  VIEW_ONLY // FREE
  COMMENT // FREE
  EDIT // PAID (requires collaborator)

  @@schema("core")
}

enum LLMProvider {
  OPENAI
  ANTHROPIC
  GOOGLE_GEMINI
  PERPLEXITY
  MISTRAL
  META_AI
  XAI
  DEEPSEEK
  COHERE
  GROQ
  TOGETHER
  REPLICATE
  HUGGINGFACE
  OPENROUTER
  BEDROCK
  OLLAMA
  VLLM
  LLAMACPP
  TEXTGEN_WEBUI
  CUSTOM

  @@schema("core")
}

enum AuthType {
  BEARER_TOKEN
  API_KEY_HEADER
  BASIC_AUTH
  OAUTH2
  AWS_SIGV4
  CUSTOM_HEADER

  @@schema("core")
}

enum ShareableAssetType {
  CANVAS
  CONTEXT_MODULE

  @@schema("core")
}

// ==========================================
// DOCUMENTS SCHEMA - File Storage & Embeddings
// ==========================================

model Document {
  id          String @id @default(cuid())
  workspaceId String
  name        String @db.VarChar(255)

  // S3 storage
  storageKey String @unique @db.VarChar(512)
  s3Bucket   String @db.VarChar(255)

  fileType    String         @db.VarChar(100)
  mimeType    String?        @db.VarChar(255)
  sizeInBytes BigInt
  status      DocumentStatus @default(UPLOADING)
  uploadedBy  String?

  metadata Json?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace  Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  embeddings Embedding[]
  actionPods ActionPod[]

  @@index([workspaceId, status, createdAt(sort: Desc)])
  @@index([storageKey])
  @@index([status, updatedAt])
  @@index([fileType, workspaceId])
  @@schema("documents")
}

model Embedding {
  id         String @id @default(cuid())
  documentId String
  model      String @db.VarChar(100)
  chunkIndex Int
  chunkText  String @db.Text

  // S3 Vectors ONLY (NO pgvector)
  s3VectorBucket  String @db.VarChar(255)
  s3VectorKey     String @db.VarChar(512)
  vectorDimension Int    @default(1536)

  metadata Json?

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex])
  @@unique([s3VectorBucket, s3VectorKey])
  @@index([documentId, createdAt(sort: Desc)])
  @@index([model, createdAt(sort: Desc)])
  @@index([s3VectorBucket])
  @@schema("documents")
}

enum DocumentStatus {
  UPLOADING
  PROCESSING
  READY
  ERROR
  ARCHIVED

  @@schema("documents")
}

// /prisma/schema.prisma

// This is your main Prisma schema file.
// It defines the database connection and the Prisma Client generator.
// Models are organized into separate files for better maintainability.

generator client {
  provider        = "prisma-client-js"
  output          = "../client"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["core", "canvas", "billing", "documents", "admin"]
}
