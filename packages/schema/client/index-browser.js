
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  role: 'role',
  status: 'status',
  isSuperAdmin: 'isSuperAdmin',
  requiresMfa: 'requiresMfa',
  mfaSecret: 'mfaSecret',
  mfaBackupCodes: 'mfaBackupCodes',
  mfaVerifiedAt: 'mfaVerifiedAt',
  allowedIpAddresses: 'allowedIpAddresses',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  passwordChangedAt: 'passwordChangedAt',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpiry: 'passwordResetExpiry',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  deactivatedAt: 'deactivatedAt',
  deactivatedBy: 'deactivatedBy'
};

exports.Prisma.AdminSessionScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  token: 'token',
  refreshToken: 'refreshToken',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceFingerprint: 'deviceFingerprint',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  lastActivityAt: 'lastActivityAt',
  revokedAt: 'revokedAt',
  revokedReason: 'revokedReason'
};

exports.Prisma.AdminAuditLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  method: 'method',
  endpoint: 'endpoint',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  changesBefore: 'changesBefore',
  changesAfter: 'changesAfter',
  status: 'status',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  executionTimeMs: 'executionTimeMs',
  createdAt: 'createdAt'
};

exports.Prisma.AdminPermissionScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  permission: 'permission',
  resource: 'resource',
  grantedAt: 'grantedAt',
  grantedBy: 'grantedBy',
  expiresAt: 'expiresAt'
};

exports.Prisma.AdminAPIKeyScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  name: 'name',
  keyHash: 'keyHash',
  keyPrefix: 'keyPrefix',
  scopes: 'scopes',
  rateLimit: 'rateLimit',
  allowedIps: 'allowedIps',
  createdAt: 'createdAt',
  lastUsedAt: 'lastUsedAt',
  expiresAt: 'expiresAt',
  revokedAt: 'revokedAt'
};

exports.Prisma.AdminInvitationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  role: 'role',
  token: 'token',
  invitedBy: 'invitedBy',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt'
};

exports.Prisma.AdminSecurityEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  severity: 'severity',
  adminId: 'adminId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  description: 'description',
  metadata: 'metadata',
  resolved: 'resolved',
  resolvedAt: 'resolvedAt',
  resolvedBy: 'resolvedBy',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  tier: 'tier',
  status: 'status',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  credits: 'credits',
  monthlyCreditQuota: 'monthlyCreditQuota',
  creditResetDate: 'creditResetDate',
  maxCanvases: 'maxCanvases',
  maxActionPodsPerCanvas: 'maxActionPodsPerCanvas',
  maxDocumentSizeInMB: 'maxDocumentSizeInMB',
  maxCollaboratorsPerCanvas: 'maxCollaboratorsPerCanvas',
  canInviteToWorkspace: 'canInviteToWorkspace',
  canInviteToCanvas: 'canInviteToCanvas',
  canCreatePublicLinks: 'canCreatePublicLinks',
  canUseAdvancedModels: 'canUseAdvancedModels',
  canAccessAnalytics: 'canAccessAnalytics',
  canExportData: 'canExportData',
  nextBillingDate: 'nextBillingDate',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  isByokMode: 'isByokMode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditPurchaseScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  creditsPurchased: 'creditsPurchased',
  amountPaid: 'amountPaid',
  currency: 'currency',
  stripeChargeId: 'stripeChargeId',
  status: 'status',
  purchasedAt: 'purchasedAt'
};

exports.Prisma.CreditUsageLogScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  workspaceId: 'workspaceId',
  canvasId: 'canvasId',
  podId: 'podId',
  executionId: 'executionId',
  creditsUsed: 'creditsUsed',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  provider: 'provider',
  modelId: 'modelId',
  modelName: 'modelName',
  createdAt: 'createdAt'
};

exports.Prisma.ModelPricingTierScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  modelId: 'modelId',
  category: 'category',
  displayName: 'displayName',
  description: 'description',
  inputTokenCost: 'inputTokenCost',
  outputTokenCost: 'outputTokenCost',
  reasoningTokenCost: 'reasoningTokenCost',
  creditsPerMillionInputTokens: 'creditsPerMillionInputTokens',
  creditsPerMillionOutputTokens: 'creditsPerMillionOutputTokens',
  creditsPerMillionReasoningTokens: 'creditsPerMillionReasoningTokens',
  maxTokens: 'maxTokens',
  maxOutputTokens: 'maxOutputTokens',
  supportsStreaming: 'supportsStreaming',
  supportsVision: 'supportsVision',
  supportsAudio: 'supportsAudio',
  supportsVideo: 'supportsVideo',
  supportsFunctions: 'supportsFunctions',
  supportsJsonMode: 'supportsJsonMode',
  supportsSystemPrompt: 'supportsSystemPrompt',
  providerConfig: 'providerConfig',
  isActive: 'isActive',
  effectiveFrom: 'effectiveFrom',
  effectiveUntil: 'effectiveUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpaceScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  description: 'description',
  customInstructions: 'customInstructions',
  icon: 'icon',
  color: 'color',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FlowScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  spaceId: 'spaceId',
  name: 'name',
  description: 'description',
  version: 'version',
  visibility: 'visibility',
  createdBy: 'createdBy',
  thumbnailS3Key: 'thumbnailS3Key',
  thumbnailGeneratedAt: 'thumbnailGeneratedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FlowInvitationScalarFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  email: 'email',
  accessLevel: 'accessLevel',
  permissions: 'permissions',
  invitedBy: 'invitedBy',
  invitedUserId: 'invitedUserId',
  token: 'token',
  status: 'status',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt'
};

exports.Prisma.FlowCollaboratorScalarFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  userId: 'userId',
  accessLevel: 'accessLevel',
  canEdit: 'canEdit',
  canExecute: 'canExecute',
  canDelete: 'canDelete',
  canShare: 'canShare',
  canInvite: 'canInvite',
  invitedBy: 'invitedBy',
  invitedAt: 'invitedAt',
  lastViewedAt: 'lastViewedAt'
};

exports.Prisma.FlowSessionScalarFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  userId: 'userId',
  anonymousName: 'anonymousName',
  sessionToken: 'sessionToken',
  socketId: 'socketId',
  cursorPosition: 'cursorPosition',
  selectedPodIds: 'selectedPodIds',
  viewportState: 'viewportState',
  userColor: 'userColor',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  connectedAt: 'connectedAt',
  lastHeartbeatAt: 'lastHeartbeatAt',
  disconnectedAt: 'disconnectedAt'
};

exports.Prisma.FlowActivityLogScalarFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  changeData: 'changeData',
  createdAt: 'createdAt'
};

exports.Prisma.FlowCommentScalarFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  userId: 'userId',
  content: 'content',
  position: 'position',
  podId: 'podId',
  parentId: 'parentId',
  isResolved: 'isResolved',
  resolvedBy: 'resolvedBy',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PodScalarFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  type: 'type',
  position: 'position',
  executionStatus: 'executionStatus',
  lastExecutionId: 'lastExecutionId',
  contextFlowId: 'contextFlowId',
  documentId: 'documentId',
  lockedBy: 'lockedBy',
  lockedAt: 'lockedAt',
  dynamoPartitionKey: 'dynamoPartitionKey',
  dynamoSortKey: 'dynamoSortKey',
  s3VectorBucket: 's3VectorBucket',
  s3VectorKey: 's3VectorKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EdgeScalarFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  sourcePodId: 'sourcePodId',
  targetPodId: 'targetPodId',
  sourceHandle: 'sourceHandle',
  targetHandle: 'targetHandle',
  animated: 'animated',
  createdAt: 'createdAt'
};

exports.Prisma.PodExecutionScalarFieldEnum = {
  id: 'id',
  podId: 'podId',
  flowId: 'flowId',
  workspaceId: 'workspaceId',
  status: 'status',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt',
  runtimeInMs: 'runtimeInMs',
  apiKeyId: 'apiKeyId',
  provider: 'provider',
  modelId: 'modelId',
  modelName: 'modelName',
  providerMetadata: 'providerMetadata',
  requestMetadata: 'requestMetadata',
  responseMetadata: 'responseMetadata',
  errorMessage: 'errorMessage',
  errorCode: 'errorCode',
  inputTokens: 'inputTokens',
  outputTokens: 'outputTokens',
  reasoningTokens: 'reasoningTokens',
  creditsConsumed: 'creditsConsumed',
  costInUsd: 'costInUsd'
};

exports.Prisma.PodUsageLogScalarFieldEnum = {
  id: 'id',
  podId: 'podId',
  executionId: 'executionId',
  flowId: 'flowId',
  workspaceId: 'workspaceId',
  subscriptionId: 'subscriptionId',
  apiKeyId: 'apiKeyId',
  provider: 'provider',
  modelId: 'modelId',
  modelName: 'modelName',
  providerMetadata: 'providerMetadata',
  inputTokens: 'inputTokens',
  outputTokens: 'outputTokens',
  reasoningTokens: 'reasoningTokens',
  creditsConsumed: 'creditsConsumed',
  runtimeInMs: 'runtimeInMs',
  inputTokenCost: 'inputTokenCost',
  outputTokenCost: 'outputTokenCost',
  reasoningTokenCost: 'reasoningTokenCost',
  totalCostInUsd: 'totalCostInUsd',
  executedAt: 'executedAt'
};

exports.Prisma.ContextModuleScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  description: 'description',
  definitionJson: 'definitionJson',
  originalFlowId: 'originalFlowId',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  image: 'image',
  hash: 'hash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  deviceName: 'deviceName',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.WorkspaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkspaceUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  role: 'role',
  canCreateCanvas: 'canCreateCanvas',
  canDeleteCanvas: 'canDeleteCanvas',
  canManageBilling: 'canManageBilling',
  canInviteMembers: 'canInviteMembers',
  canManageMembers: 'canManageMembers',
  canManageApiKeys: 'canManageApiKeys',
  joinedAt: 'joinedAt',
  invitedBy: 'invitedBy'
};

exports.Prisma.WorkspaceInvitationScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  email: 'email',
  role: 'role',
  permissions: 'permissions',
  invitedBy: 'invitedBy',
  invitedUserId: 'invitedUserId',
  token: 'token',
  status: 'status',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt'
};

exports.Prisma.ProviderAPIKeyScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  provider: 'provider',
  displayName: 'displayName',
  keyHash: 'keyHash',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  usageCount: 'usageCount',
  totalTokens: 'totalTokens',
  totalCost: 'totalCost',
  lastErrorAt: 'lastErrorAt',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.UsageMetricScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  keyId: 'keyId',
  date: 'date',
  requestCount: 'requestCount',
  successCount: 'successCount',
  errorCount: 'errorCount',
  promptTokens: 'promptTokens',
  completionTokens: 'completionTokens',
  totalTokens: 'totalTokens',
  estimatedCost: 'estimatedCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShareLinkScalarFieldEnum = {
  id: 'id',
  publicToken: 'publicToken',
  assetType: 'assetType',
  assetId: 'assetId',
  workspaceId: 'workspaceId',
  createdBy: 'createdBy',
  accessLevel: 'accessLevel',
  password: 'password',
  viewCount: 'viewCount',
  lastViewedAt: 'lastViewedAt',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.DocumentFolderScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  parentId: 'parentId',
  icon: 'icon',
  color: 'color',
  sortOrder: 'sortOrder',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  folderId: 'folderId',
  name: 'name',
  sourceType: 'sourceType',
  storageKey: 'storageKey',
  s3Bucket: 's3Bucket',
  externalUrl: 'externalUrl',
  externalProvider: 'externalProvider',
  externalFileId: 'externalFileId',
  fileType: 'fileType',
  mimeType: 'mimeType',
  sizeInBytes: 'sizeInBytes',
  status: 'status',
  uploadedBy: 'uploadedBy',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmbeddingScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  model: 'model',
  chunkIndex: 'chunkIndex',
  chunkText: 'chunkText',
  s3VectorBucket: 's3VectorBucket',
  s3VectorKey: 's3VectorKey',
  vectorDimension: 'vectorDimension',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentProcessingCostScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  workspaceId: 'workspaceId',
  subscriptionId: 'subscriptionId',
  processingType: 'processingType',
  creditsConsumed: 'creditsConsumed',
  extractionCost: 'extractionCost',
  embeddingCost: 'embeddingCost',
  totalCostInUsd: 'totalCostInUsd',
  chunkCount: 'chunkCount',
  embeddingModel: 'embeddingModel',
  processingTimeMs: 'processingTimeMs',
  tokensProcessed: 'tokensProcessed',
  processedAt: 'processedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AdminOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  passwordHash: 'passwordHash',
  mfaSecret: 'mfaSecret',
  lastLoginIp: 'lastLoginIp',
  passwordResetToken: 'passwordResetToken',
  createdBy: 'createdBy',
  deactivatedBy: 'deactivatedBy'
};

exports.Prisma.AdminSessionOrderByRelevanceFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  token: 'token',
  refreshToken: 'refreshToken',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceFingerprint: 'deviceFingerprint',
  revokedReason: 'revokedReason'
};

exports.Prisma.AdminAuditLogOrderByRelevanceFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  resourceId: 'resourceId',
  method: 'method',
  endpoint: 'endpoint',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  errorMessage: 'errorMessage'
};

exports.Prisma.AdminPermissionOrderByRelevanceFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  grantedBy: 'grantedBy'
};

exports.Prisma.AdminAPIKeyOrderByRelevanceFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  name: 'name',
  keyHash: 'keyHash',
  keyPrefix: 'keyPrefix'
};

exports.Prisma.AdminInvitationOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  invitedBy: 'invitedBy'
};

exports.Prisma.AdminSecurityEventOrderByRelevanceFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  description: 'description',
  resolvedBy: 'resolvedBy'
};

exports.Prisma.SubscriptionOrderByRelevanceFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId'
};

exports.Prisma.CreditPurchaseOrderByRelevanceFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  currency: 'currency',
  stripeChargeId: 'stripeChargeId',
  status: 'status'
};

exports.Prisma.CreditUsageLogOrderByRelevanceFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  workspaceId: 'workspaceId',
  canvasId: 'canvasId',
  podId: 'podId',
  executionId: 'executionId',
  modelId: 'modelId',
  modelName: 'modelName'
};

exports.Prisma.ModelPricingTierOrderByRelevanceFieldEnum = {
  id: 'id',
  modelId: 'modelId',
  displayName: 'displayName',
  description: 'description'
};

exports.Prisma.SpaceOrderByRelevanceFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  description: 'description',
  customInstructions: 'customInstructions',
  icon: 'icon',
  color: 'color',
  createdBy: 'createdBy'
};

exports.Prisma.FlowOrderByRelevanceFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  spaceId: 'spaceId',
  name: 'name',
  description: 'description',
  createdBy: 'createdBy',
  thumbnailS3Key: 'thumbnailS3Key'
};

exports.Prisma.FlowInvitationOrderByRelevanceFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  email: 'email',
  invitedBy: 'invitedBy',
  invitedUserId: 'invitedUserId',
  token: 'token'
};

exports.Prisma.FlowCollaboratorOrderByRelevanceFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  userId: 'userId',
  invitedBy: 'invitedBy'
};

exports.Prisma.FlowSessionOrderByRelevanceFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  userId: 'userId',
  anonymousName: 'anonymousName',
  sessionToken: 'sessionToken',
  socketId: 'socketId',
  userColor: 'userColor',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress'
};

exports.Prisma.FlowActivityLogOrderByRelevanceFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  userId: 'userId',
  entityType: 'entityType',
  entityId: 'entityId'
};

exports.Prisma.FlowCommentOrderByRelevanceFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  userId: 'userId',
  content: 'content',
  podId: 'podId',
  parentId: 'parentId',
  resolvedBy: 'resolvedBy'
};

exports.Prisma.PodOrderByRelevanceFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  lastExecutionId: 'lastExecutionId',
  contextFlowId: 'contextFlowId',
  documentId: 'documentId',
  lockedBy: 'lockedBy',
  dynamoPartitionKey: 'dynamoPartitionKey',
  dynamoSortKey: 'dynamoSortKey',
  s3VectorBucket: 's3VectorBucket',
  s3VectorKey: 's3VectorKey'
};

exports.Prisma.EdgeOrderByRelevanceFieldEnum = {
  id: 'id',
  flowId: 'flowId',
  sourcePodId: 'sourcePodId',
  targetPodId: 'targetPodId',
  sourceHandle: 'sourceHandle',
  targetHandle: 'targetHandle'
};

exports.Prisma.PodExecutionOrderByRelevanceFieldEnum = {
  id: 'id',
  podId: 'podId',
  flowId: 'flowId',
  workspaceId: 'workspaceId',
  apiKeyId: 'apiKeyId',
  modelId: 'modelId',
  modelName: 'modelName',
  errorMessage: 'errorMessage',
  errorCode: 'errorCode'
};

exports.Prisma.PodUsageLogOrderByRelevanceFieldEnum = {
  id: 'id',
  podId: 'podId',
  executionId: 'executionId',
  flowId: 'flowId',
  workspaceId: 'workspaceId',
  subscriptionId: 'subscriptionId',
  apiKeyId: 'apiKeyId',
  modelId: 'modelId',
  modelName: 'modelName'
};

exports.Prisma.ContextModuleOrderByRelevanceFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  description: 'description',
  originalFlowId: 'originalFlowId'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  image: 'image',
  hash: 'hash'
};

exports.Prisma.RefreshTokenOrderByRelevanceFieldEnum = {
  id: 'id',
  token: 'token',
  deviceName: 'deviceName',
  userId: 'userId'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  providerAccountId: 'providerAccountId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken'
};

exports.Prisma.WorkspaceOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.WorkspaceUserOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  workspaceId: 'workspaceId',
  invitedBy: 'invitedBy'
};

exports.Prisma.WorkspaceInvitationOrderByRelevanceFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  email: 'email',
  invitedBy: 'invitedBy',
  invitedUserId: 'invitedUserId',
  token: 'token'
};

exports.Prisma.ProviderAPIKeyOrderByRelevanceFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  displayName: 'displayName',
  keyHash: 'keyHash',
  createdById: 'createdById'
};

exports.Prisma.UsageMetricOrderByRelevanceFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  keyId: 'keyId'
};

exports.Prisma.ShareLinkOrderByRelevanceFieldEnum = {
  id: 'id',
  publicToken: 'publicToken',
  assetId: 'assetId',
  workspaceId: 'workspaceId',
  createdBy: 'createdBy',
  password: 'password'
};

exports.Prisma.DocumentFolderOrderByRelevanceFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  parentId: 'parentId',
  icon: 'icon',
  color: 'color',
  createdBy: 'createdBy'
};

exports.Prisma.DocumentOrderByRelevanceFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  folderId: 'folderId',
  name: 'name',
  storageKey: 'storageKey',
  s3Bucket: 's3Bucket',
  externalUrl: 'externalUrl',
  externalProvider: 'externalProvider',
  externalFileId: 'externalFileId',
  fileType: 'fileType',
  mimeType: 'mimeType',
  uploadedBy: 'uploadedBy'
};

exports.Prisma.EmbeddingOrderByRelevanceFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  model: 'model',
  chunkText: 'chunkText',
  s3VectorBucket: 's3VectorBucket',
  s3VectorKey: 's3VectorKey'
};

exports.Prisma.DocumentProcessingCostOrderByRelevanceFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  workspaceId: 'workspaceId',
  subscriptionId: 'subscriptionId',
  embeddingModel: 'embeddingModel'
};
exports.AdminRole = exports.$Enums.AdminRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  FINANCE: 'FINANCE',
  SUPPORT: 'SUPPORT',
  DEVELOPER: 'DEVELOPER',
  ANALYST: 'ANALYST'
};

exports.AdminStatus = exports.$Enums.AdminStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  DEACTIVATED: 'DEACTIVATED',
  LOCKED: 'LOCKED'
};

exports.AdminAction = exports.$Enums.AdminAction = {
  USER_CREATED: 'USER_CREATED',
  USER_UPDATED: 'USER_UPDATED',
  USER_DELETED: 'USER_DELETED',
  USER_SUSPENDED: 'USER_SUSPENDED',
  WORKSPACE_DELETED: 'WORKSPACE_DELETED',
  SUBSCRIPTION_UPDATED: 'SUBSCRIPTION_UPDATED',
  SUBSCRIPTION_CANCELLED: 'SUBSCRIPTION_CANCELLED',
  CREDITS_ADDED: 'CREDITS_ADDED',
  CREDITS_REMOVED: 'CREDITS_REMOVED',
  REFUND_ISSUED: 'REFUND_ISSUED',
  MODEL_ADDED: 'MODEL_ADDED',
  MODEL_UPDATED: 'MODEL_UPDATED',
  PRICING_CHANGED: 'PRICING_CHANGED',
  ADMIN_INVITED: 'ADMIN_INVITED',
  ADMIN_CREATED: 'ADMIN_CREATED',
  ADMIN_ROLE_CHANGED: 'ADMIN_ROLE_CHANGED',
  PERMISSION_GRANTED: 'PERMISSION_GRANTED',
  SESSION_REVOKED: 'SESSION_REVOKED',
  CONFIG_CHANGED: 'CONFIG_CHANGED',
  DATA_EXPORTED: 'DATA_EXPORTED'
};

exports.AdminResource = exports.$Enums.AdminResource = {
  USER: 'USER',
  WORKSPACE: 'WORKSPACE',
  SUBSCRIPTION: 'SUBSCRIPTION',
  CREDIT: 'CREDIT',
  MODEL: 'MODEL',
  ADMIN: 'ADMIN',
  PERMISSION: 'PERMISSION',
  SESSION: 'SESSION',
  API_KEY: 'API_KEY',
  CANVAS: 'CANVAS',
  ACTION_POD: 'ACTION_POD',
  DOCUMENT: 'DOCUMENT',
  AUDIT_LOG: 'AUDIT_LOG',
  SYSTEM_CONFIG: 'SYSTEM_CONFIG'
};

exports.SpecificPermission = exports.$Enums.SpecificPermission = {
  USER_VIEW: 'USER_VIEW',
  USER_UPDATE: 'USER_UPDATE',
  USER_DELETE: 'USER_DELETE',
  USER_SUSPEND: 'USER_SUSPEND',
  WORKSPACE_VIEW: 'WORKSPACE_VIEW',
  WORKSPACE_DELETE: 'WORKSPACE_DELETE',
  BILLING_VIEW: 'BILLING_VIEW',
  BILLING_MANAGE: 'BILLING_MANAGE',
  CREDITS_MANAGE: 'CREDITS_MANAGE',
  REFUND_ISSUE: 'REFUND_ISSUE',
  MODEL_VIEW: 'MODEL_VIEW',
  MODEL_MANAGE: 'MODEL_MANAGE',
  PRICING_MANAGE: 'PRICING_MANAGE',
  ADMIN_VIEW: 'ADMIN_VIEW',
  ADMIN_INVITE: 'ADMIN_INVITE',
  ADMIN_MANAGE: 'ADMIN_MANAGE',
  SYSTEM_CONFIG_VIEW: 'SYSTEM_CONFIG_VIEW',
  SYSTEM_CONFIG_MANAGE: 'SYSTEM_CONFIG_MANAGE',
  AUDIT_LOG_VIEW: 'AUDIT_LOG_VIEW',
  AUDIT_LOG_EXPORT: 'AUDIT_LOG_EXPORT',
  DATA_EXPORT: 'DATA_EXPORT',
  DATA_DELETE: 'DATA_DELETE'
};

exports.SecurityEventType = exports.$Enums.SecurityEventType = {
  FAILED_LOGIN: 'FAILED_LOGIN',
  MULTIPLE_FAILED_LOGINS: 'MULTIPLE_FAILED_LOGINS',
  SUSPICIOUS_IP: 'SUSPICIOUS_IP',
  ACCOUNT_LOCKED: 'ACCOUNT_LOCKED',
  MFA_FAILED: 'MFA_FAILED',
  UNAUTHORIZED_ACCESS_ATTEMPT: 'UNAUTHORIZED_ACCESS_ATTEMPT'
};

exports.SecuritySeverity = exports.$Enums.SecuritySeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.SubscriptionTier = exports.$Enums.SubscriptionTier = {
  HOBBYIST: 'HOBBYIST',
  PRO: 'PRO',
  TEAM: 'TEAM'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  PAST_DUE: 'PAST_DUE',
  TRIALING: 'TRIALING',
  INCOMPLETE: 'INCOMPLETE',
  PAUSED: 'PAUSED'
};

exports.LLMProvider = exports.$Enums.LLMProvider = {
  OPENAI: 'OPENAI',
  ANTHROPIC: 'ANTHROPIC',
  GOOGLE_GEMINI: 'GOOGLE_GEMINI',
  PERPLEXITY: 'PERPLEXITY',
  MISTRAL: 'MISTRAL',
  COHERE: 'COHERE',
  GROQ: 'GROQ',
  XAI: 'XAI',
  DEEPSEEK: 'DEEPSEEK',
  CUSTOM: 'CUSTOM'
};

exports.ModelCategory = exports.$Enums.ModelCategory = {
  WORKHORSE: 'WORKHORSE',
  POWERHOUSE: 'POWERHOUSE',
  REASONING: 'REASONING',
  SPECIALIST: 'SPECIALIST',
  IMAGE_GEN: 'IMAGE_GEN',
  VIDEO_GEN: 'VIDEO_GEN',
  AUDIO_GEN: 'AUDIO_GEN',
  EMBEDDING: 'EMBEDDING',
  RERANKING: 'RERANKING',
  MODERATION: 'MODERATION',
  SEARCH: 'SEARCH',
  TRANSLATION: 'TRANSLATION'
};

exports.FlowVisibility = exports.$Enums.FlowVisibility = {
  PRIVATE: 'PRIVATE',
  WORKSPACE: 'WORKSPACE',
  PUBLIC: 'PUBLIC'
};

exports.FlowAccessLevel = exports.$Enums.FlowAccessLevel = {
  VIEWER: 'VIEWER',
  COMMENTER: 'COMMENTER',
  EDITOR: 'EDITOR',
  OWNER: 'OWNER'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  EXPIRED: 'EXPIRED',
  REVOKED: 'REVOKED'
};

exports.FlowActivityAction = exports.$Enums.FlowActivityAction = {
  FLOW_CREATED: 'FLOW_CREATED',
  FLOW_UPDATED: 'FLOW_UPDATED',
  FLOW_DELETED: 'FLOW_DELETED',
  FLOW_SHARED: 'FLOW_SHARED',
  FLOW_VISIBILITY_CHANGED: 'FLOW_VISIBILITY_CHANGED',
  POD_CREATED: 'POD_CREATED',
  POD_UPDATED: 'POD_UPDATED',
  POD_DELETED: 'POD_DELETED',
  POD_MOVED: 'POD_MOVED',
  POD_EXECUTED: 'POD_EXECUTED',
  POD_LOCKED: 'POD_LOCKED',
  POD_UNLOCKED: 'POD_UNLOCKED',
  EDGE_CREATED: 'EDGE_CREATED',
  EDGE_DELETED: 'EDGE_DELETED',
  COLLABORATOR_ADDED: 'COLLABORATOR_ADDED',
  COLLABORATOR_REMOVED: 'COLLABORATOR_REMOVED',
  COLLABORATOR_PERMISSIONS_CHANGED: 'COLLABORATOR_PERMISSIONS_CHANGED',
  COMMENT_ADDED: 'COMMENT_ADDED',
  COMMENT_RESOLVED: 'COMMENT_RESOLVED',
  USER_JOINED: 'USER_JOINED',
  USER_LEFT: 'USER_LEFT'
};

exports.PodType = exports.$Enums.PodType = {
  TEXT_INPUT: 'TEXT_INPUT',
  DOCUMENT_INPUT: 'DOCUMENT_INPUT',
  URL_INPUT: 'URL_INPUT',
  IMAGE_INPUT: 'IMAGE_INPUT',
  VIDEO_INPUT: 'VIDEO_INPUT',
  AUDIO_INPUT: 'AUDIO_INPUT',
  LLM_PROMPT: 'LLM_PROMPT',
  EMBEDDING_POD: 'EMBEDDING_POD',
  TOOL_POD: 'TOOL_POD',
  TEXT_OUTPUT: 'TEXT_OUTPUT',
  IMAGE_OUTPUT: 'IMAGE_OUTPUT',
  VIDEO_OUTPUT: 'VIDEO_OUTPUT',
  AUDIO_OUTPUT: 'AUDIO_OUTPUT',
  CONTEXT_MODULE: 'CONTEXT_MODULE',
  FLOW_CONTEXT_INPUT: 'FLOW_CONTEXT_INPUT',
  CODE_EXECUTION: 'CODE_EXECUTION'
};

exports.PodExecutionStatus = exports.$Enums.PodExecutionStatus = {
  IDLE: 'IDLE',
  QUEUED: 'QUEUED',
  RUNNING: 'RUNNING',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  ERROR: 'ERROR',
  CANCELLED: 'CANCELLED'
};

exports.AuthProvider = exports.$Enums.AuthProvider = {
  GOOGLE: 'GOOGLE',
  GITHUB: 'GITHUB',
  EMAIL: 'EMAIL'
};

exports.WorkspaceType = exports.$Enums.WorkspaceType = {
  PERSONAL: 'PERSONAL',
  TEAM: 'TEAM'
};

exports.WorkspaceRole = exports.$Enums.WorkspaceRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER'
};

exports.ShareableAssetType = exports.$Enums.ShareableAssetType = {
  FLOW: 'FLOW',
  CONTEXT_MODULE: 'CONTEXT_MODULE'
};

exports.ShareAccessLevel = exports.$Enums.ShareAccessLevel = {
  VIEW_ONLY: 'VIEW_ONLY',
  COMMENT: 'COMMENT',
  EDIT: 'EDIT'
};

exports.DocumentSourceType = exports.$Enums.DocumentSourceType = {
  INTERNAL: 'INTERNAL',
  GOOGLE_DRIVE: 'GOOGLE_DRIVE',
  YOUTUBE: 'YOUTUBE',
  VIMEO: 'VIMEO',
  LOOM: 'LOOM',
  URL: 'URL'
};

exports.DocumentStatus = exports.$Enums.DocumentStatus = {
  UPLOADING: 'UPLOADING',
  PROCESSING: 'PROCESSING',
  READY: 'READY',
  ERROR: 'ERROR',
  ARCHIVED: 'ARCHIVED'
};

exports.DocumentProcessingType = exports.$Enums.DocumentProcessingType = {
  PDF_TEXT_EXTRACTION: 'PDF_TEXT_EXTRACTION',
  IMAGE_OCR: 'IMAGE_OCR',
  VIDEO_TRANSCRIPT: 'VIDEO_TRANSCRIPT',
  AUDIO_TRANSCRIPT: 'AUDIO_TRANSCRIPT',
  DOCUMENT_EMBEDDING: 'DOCUMENT_EMBEDDING',
  URL_SCRAPING: 'URL_SCRAPING',
  VISION_EXTRACTION: 'VISION_EXTRACTION'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  AdminSession: 'AdminSession',
  AdminAuditLog: 'AdminAuditLog',
  AdminPermission: 'AdminPermission',
  AdminAPIKey: 'AdminAPIKey',
  AdminInvitation: 'AdminInvitation',
  AdminSecurityEvent: 'AdminSecurityEvent',
  Subscription: 'Subscription',
  CreditPurchase: 'CreditPurchase',
  CreditUsageLog: 'CreditUsageLog',
  ModelPricingTier: 'ModelPricingTier',
  Space: 'Space',
  Flow: 'Flow',
  FlowInvitation: 'FlowInvitation',
  FlowCollaborator: 'FlowCollaborator',
  FlowSession: 'FlowSession',
  FlowActivityLog: 'FlowActivityLog',
  FlowComment: 'FlowComment',
  Pod: 'Pod',
  Edge: 'Edge',
  PodExecution: 'PodExecution',
  PodUsageLog: 'PodUsageLog',
  ContextModule: 'ContextModule',
  User: 'User',
  RefreshToken: 'RefreshToken',
  Account: 'Account',
  Workspace: 'Workspace',
  WorkspaceUser: 'WorkspaceUser',
  WorkspaceInvitation: 'WorkspaceInvitation',
  ProviderAPIKey: 'ProviderAPIKey',
  UsageMetric: 'UsageMetric',
  ShareLink: 'ShareLink',
  DocumentFolder: 'DocumentFolder',
  Document: 'Document',
  Embedding: 'Embedding',
  DocumentProcessingCost: 'DocumentProcessingCost'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
