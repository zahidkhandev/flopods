// /prisma/schemas/documents.prisma

// ==========================================
// DOCUMENTS SCHEMA - File Storage, Embeddings & Processing
// ==========================================

// Document Folders (like Google Drive folders)
model DocumentFolder {
  id          String @id @default(cuid())
  workspaceId String
  name        String @db.VarChar(255)

  // Self-referential for nested folders (folder within folder)
  parentId String?
  parent   DocumentFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children DocumentFolder[] @relation("FolderHierarchy")

  icon  String? @db.VarChar(50)
  color String? @db.VarChar(7)

  sortOrder Int @default(0)

  createdBy String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  documents Document[] // Documents in this folder

  @@unique([workspaceId, parentId, name])
  @@index([workspaceId, parentId, sortOrder])
  @@index([parentId, sortOrder])
  @@schema("documents")
}

model Document {
  id          String  @id @default(cuid())
  workspaceId String
  folderId    String? // Optional folder location
  name        String  @db.VarChar(255)

  sourceType DocumentSourceType @default(INTERNAL)

  // For INTERNAL (uploaded files)
  storageKey String? @unique @db.VarChar(512)
  s3Bucket   String? @db.VarChar(255)

  // For EXTERNAL (YouTube, Google Drive, URLs, etc.)
  externalUrl      String? @db.VarChar(2048)
  externalProvider String? @db.VarChar(50)
  externalFileId   String? @db.VarChar(512)

  fileType    String         @db.VarChar(100)
  mimeType    String?        @db.VarChar(255)
  sizeInBytes BigInt?
  status      DocumentStatus @default(UPLOADING)
  uploadedBy  String?

  metadata Json? // Store thumbnails, duration, channel info, etc.

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace             Workspace                @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  folder                DocumentFolder?          @relation(fields: [folderId], references: [id], onDelete: SetNull)
  embeddings            Embedding[]
  pods                  Pod[]
  processingCostRecords DocumentProcessingCost[]

  @@index([workspaceId, folderId, status, createdAt(sort: Desc)])
  @@index([workspaceId, status, createdAt(sort: Desc)])
  @@index([workspaceId, sourceType, createdAt(sort: Desc)])
  @@index([folderId, createdAt(sort: Desc)])
  @@index([storageKey])
  @@index([status, updatedAt])
  @@index([fileType, workspaceId])
  @@index([externalProvider, externalFileId])
  @@schema("documents")
}

model Embedding {
  id         String @id @default(cuid())
  documentId String
  model      String @db.VarChar(100)
  chunkIndex Int
  chunkText  String @db.Text

  // S3 Vectors - AWS S3 storage (NOT pgvector)
  s3VectorBucket  String @db.VarChar(255)
  s3VectorKey     String @db.VarChar(512)
  vectorDimension Int    @default(1536)

  metadata Json?

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, chunkIndex])
  @@unique([s3VectorBucket, s3VectorKey])
  @@index([documentId, createdAt(sort: Desc)])
  @@index([model, createdAt(sort: Desc)])
  @@index([s3VectorBucket])
  @@schema("documents")
}

model DocumentProcessingCost {
  id             String @id @default(cuid())
  documentId     String
  workspaceId    String
  subscriptionId String

  processingType DocumentProcessingType

  creditsConsumed Int @default(0)

  // Cost breakdown
  extractionCost Decimal @default(0) @db.Decimal(12, 8) // YouTube transcript, OCR, etc.
  embeddingCost  Decimal @default(0) @db.Decimal(12, 8) // Embedding generation cost
  totalCostInUsd Decimal @db.Decimal(12, 8)

  // Processing stats
  chunkCount       Int?
  embeddingModel   String? @db.VarChar(100)
  processingTimeMs Int?
  tokensProcessed  Int     @default(0)

  processedAt DateTime @default(now()) @db.Timestamptz(6)

  document     Document     @relation(fields: [documentId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([documentId, processedAt(sort: Desc)])
  @@index([workspaceId, processedAt(sort: Desc)])
  @@index([subscriptionId, processedAt(sort: Desc)])
  @@index([processingType, processedAt(sort: Desc)])
  @@schema("documents")
}

enum DocumentStatus {
  UPLOADING
  PROCESSING
  READY
  ERROR
  ARCHIVED

  @@schema("documents")
}

enum DocumentSourceType {
  INTERNAL
  GOOGLE_DRIVE
  YOUTUBE
  VIMEO
  LOOM
  URL

  @@schema("documents")
}

enum DocumentProcessingType {
  PDF_TEXT_EXTRACTION
  IMAGE_OCR
  VIDEO_TRANSCRIPT // YouTube, Vimeo, Loom
  AUDIO_TRANSCRIPT
  DOCUMENT_EMBEDDING // General embedding generation
  URL_SCRAPING
  VISION_EXTRACTION // Image description via GPT-4V/Claude Vision

  @@schema("documents")
}
