model Canvas {
  id          String           @id @default(cuid())
  workspaceId String
  name        String           @db.VarChar(255)
  description String?          @db.VarChar(500)
  version     Int              @default(1)
  visibility  CanvasVisibility @default(PRIVATE)

  createdBy String

  // Thumbnail for sharing (S3 key)
  thumbnailS3Key       String?   @db.VarChar(512)
  thumbnailGeneratedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace       Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  actionPods      ActionPod[]
  edges           Edge[]
  contextualPods  ActionPod[]          @relation("CanvasAsContext")
  contextModules  ContextModule[]      @relation("CanvasOriginal")
  collaborators   CanvasCollaborator[]
  invitations     CanvasInvitation[]
  sessions        CanvasSession[]
  activityLog     CanvasActivityLog[]
  comments        CanvasComment[]

  @@index([workspaceId, updatedAt(sort: Desc)])
  @@index([workspaceId, createdAt(sort: Desc)])
  @@index([workspaceId, visibility])
  @@index([createdBy, createdAt(sort: Desc)])
  @@schema("canvas")
}

model CanvasInvitation {
  id        String              @id @default(cuid())
  canvasId  String
  email     String              @db.VarChar(255)
  
  accessLevel CanvasAccessLevel @default(EDITOR)
  permissions Json? // Custom permission overrides

  invitedBy     String
  invitedUserId String?

  token  String           @unique @db.VarChar(255)
  status InvitationStatus @default(PENDING)

  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime  @db.Timestamptz(6)
  acceptedAt DateTime? @db.Timestamptz(6)

  canvas      Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  inviter     User   @relation("CanvasInvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  invitedUser User?  @relation("CanvasInvitedUser", fields: [invitedUserId], references: [id], onDelete: SetNull)

  @@index([canvasId, status])
  @@index([email, status])
  @@index([token, expiresAt])
  @@schema("canvas")
}

model CanvasCollaborator {
  id        String              @id @default(cuid())
  canvasId  String
  userId    String
  
  accessLevel CanvasAccessLevel @default(EDITOR)

  // Granular permissions
  canEdit    Boolean @default(true)
  canExecute Boolean @default(true)
  canDelete  Boolean @default(false)
  canShare   Boolean @default(false) // Can create public links (FREE)
  canInvite  Boolean @default(false) // Can invite collaborators (PAID)

  invitedBy    String?
  invitedAt    DateTime  @default(now()) @db.Timestamptz(6)
  lastViewedAt DateTime? @db.Timestamptz(6)

  canvas Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([canvasId, userId])
  @@index([userId])
  @@index([canvasId, accessLevel])
  @@schema("canvas")
}

model CanvasSession {
  id       String  @id @default(cuid())
  canvasId String
  userId   String? // null for anonymous viewers

  // Anonymous session support
  anonymousName String? @db.VarChar(100)
  sessionToken  String? @unique @db.VarChar(255)

  // Real-time presence
  socketId       String? @db.VarChar(255)
  cursorPosition Json? // {x: number, y: number}
  selectedPodIds Json? // Array of selected action pod IDs
  viewportState  Json? // {zoom: number, x: number, y: number}

  userColor String? @db.VarChar(7) // Hex color for cursor

  // Session metadata
  userAgent String? @db.VarChar(500)
  ipAddress String? @db.VarChar(45)

  // Lifecycle
  connectedAt     DateTime  @default(now()) @db.Timestamptz(6)
  lastHeartbeatAt DateTime  @default(now()) @db.Timestamptz(6)
  disconnectedAt  DateTime? @db.Timestamptz(6)

  canvas Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)

  @@index([canvasId, disconnectedAt])
  @@index([socketId])
  @@index([canvasId, userId, disconnectedAt])
  @@index([lastHeartbeatAt]) // For stale session cleanup
  @@index([sessionToken])
  @@schema("canvas")
}

model CanvasActivityLog {
  id       String               @id @default(cuid())
  canvasId String
  userId   String? // null for anonymous

  action CanvasActivityAction

  entityType String? @db.VarChar(50) // 'action_pod', 'edge', 'canvas'
  entityId   String? @db.VarChar(255)

  changeData Json? // {before: {...}, after: {...}}

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  canvas Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)

  @@index([canvasId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([action, createdAt(sort: Desc)])
  @@schema("canvas")
}

model CanvasComment {
  id       String  @id @default(cuid())
  canvasId String
  userId   String?

  content  String @db.Text
  position Json? // {x: number, y: number}
  podId    String? // Attached to specific pod

  parentId String? // Thread support

  isResolved Boolean   @default(false)
  resolvedBy String?
  resolvedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  canvas Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)

  @@index([canvasId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([podId])
  @@index([parentId])
  @@index([isResolved])
  @@schema("canvas")
}

model ActionPod {
  id              String                   @id @default(cuid())
  canvasId        String
  type            ActionPodType
  position        Json
  executionStatus ActionPodExecutionStatus @default(IDLE)
  lastExecutionId String?
  contextCanvasId String?
  documentId      String?

  // Real-time collaboration lock
  lockedBy String? // userId or sessionToken
  lockedAt DateTime? @db.Timestamptz(6)

  // DynamoDB keys for pod content
  dynamoPartitionKey String @db.VarChar(255) // "WORKSPACE#{workspaceId}"
  dynamoSortKey      String @db.VarChar(255) // "CANVAS#{canvasId}#POD#{podId}#{ts}"

  // S3 Vectors for embeddings
  s3VectorBucket String? @db.VarChar(255)
  s3VectorKey    String? @db.VarChar(512)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  canvas        Canvas               @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  contextCanvas Canvas?              @relation("CanvasAsContext", fields: [contextCanvasId], references: [id], onDelete: SetNull)
  document      Document?            @relation(fields: [documentId], references: [id], onDelete: SetNull)
  sourceEdges   Edge[]               @relation("SourcePod")
  targetEdges   Edge[]               @relation("TargetPod")
  executions    ActionPodExecution[]
  usageLogs     PodUsageLog[]

  @@unique([dynamoPartitionKey, dynamoSortKey])
  @@index([canvasId, type, executionStatus])
  @@index([contextCanvasId])
  @@index([documentId])
  @@index([executionStatus, updatedAt])
  @@index([s3VectorBucket, s3VectorKey])
  @@index([lockedBy, lockedAt])
  @@schema("canvas")
}

model Edge {
  id           String   @id @default(cuid())
  canvasId     String
  sourcePodId  String
  targetPodId  String
  sourceHandle String?  @db.VarChar(100)
  targetHandle String?  @db.VarChar(100)
  animated     Boolean  @default(false)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  canvas    Canvas    @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  sourcePod ActionPod @relation("SourcePod", fields: [sourcePodId], references: [id], onDelete: Cascade)
  targetPod ActionPod @relation("TargetPod", fields: [targetPodId], references: [id], onDelete: Cascade)

  @@unique([canvasId, sourcePodId, sourceHandle, targetPodId, targetHandle])
  @@index([canvasId])
  @@index([sourcePodId])
  @@index([targetPodId])
  @@schema("canvas")
}

model ActionPodExecution {
  id          String                   @id @default(cuid())
  podId       String
  canvasId    String
  workspaceId String
  status      ActionPodExecutionStatus @default(RUNNING)
  startedAt   DateTime                 @default(now()) @db.Timestamptz(6)
  finishedAt  DateTime?                @db.Timestamptz(6)
  runtimeInMs Int?

  provider  LLMProvider
  modelId   String @db.VarChar(255)
  modelName String? @db.VarChar(255)

  providerMetadata Json?
  requestMetadata  Json?
  responseMetadata Json?

  errorMessage String? @db.Text
  errorCode    String? @db.VarChar(100)

  inputTokens     Int @default(0)
  outputTokens    Int @default(0)
  reasoningTokens Int @default(0)

  creditsConsumed Int @default(0)

  costInUsd Decimal? @db.Decimal(12, 8)

  pod ActionPod @relation(fields: [podId], references: [id], onDelete: Cascade)

  @@index([podId, startedAt(sort: Desc)])
  @@index([workspaceId, status, startedAt(sort: Desc)])
  @@index([canvasId, status, startedAt(sort: Desc)])
  @@index([status, startedAt])
  @@index([provider, modelId, startedAt(sort: Desc)])
  @@index([provider, status])
  @@schema("canvas")
}

model PodUsageLog {
  id             String @id @default(cuid())
  podId          String
  executionId    String
  canvasId       String
  workspaceId    String
  subscriptionId String

  provider  LLMProvider
  modelId   String @db.VarChar(255)
  modelName String? @db.VarChar(255)

  providerMetadata Json?

  inputTokens     Int  @default(0)
  outputTokens    Int  @default(0)
  reasoningTokens Int  @default(0)
  creditsConsumed Int  @default(0)
  runtimeInMs     Int?

  inputTokenCost     Decimal @db.Decimal(12, 8)
  outputTokenCost    Decimal @db.Decimal(12, 8)
  reasoningTokenCost Decimal @db.Decimal(12, 8)
  totalCostInUsd     Decimal @db.Decimal(12, 8)

  executedAt DateTime @default(now()) @db.Timestamptz(6)

  pod          ActionPod    @relation(fields: [podId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([workspaceId, executedAt(sort: Desc)])
  @@index([subscriptionId, executedAt(sort: Desc)])
  @@index([executionId])
  @@index([podId, executedAt(sort: Desc)])
  @@index([canvasId, executedAt(sort: Desc)])
  @@index([provider, modelId, executedAt(sort: Desc)])
  @@index([provider, executedAt(sort: Desc)])
  @@schema("canvas")
}

model ContextModule {
  id               String @id @default(cuid())
  workspaceId      String
  name             String @db.VarChar(255)
  description      String? @db.VarChar(1000)
  definitionJson   Json
  originalCanvasId String?
  version          Int      @default(1)
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @db.Timestamptz(6)

  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  originalCanvas Canvas?   @relation("CanvasOriginal", fields: [originalCanvasId], references: [id], onDelete: SetNull)

  @@index([workspaceId, updatedAt(sort: Desc)])
  @@index([originalCanvasId])
  @@schema("canvas")
}

enum ActionPodType {
  TEXT_INPUT
  DOCUMENT_INPUT
  URL_INPUT
  IMAGE_INPUT
  VIDEO_INPUT
  AUDIO_INPUT
  LLM_PROMPT
  EMBEDDING_POD
  TOOL_POD
  TEXT_OUTPUT
  IMAGE_OUTPUT
  VIDEO_OUTPUT
  AUDIO_OUTPUT
  CONTEXT_MODULE
  CANVAS_CONTEXT_INPUT
  CODE_EXECUTION

  @@schema("canvas")
}

enum ActionPodExecutionStatus {
  IDLE
  QUEUED
  RUNNING
  PAUSED
  COMPLETED
  ERROR
  CANCELLED

  @@schema("canvas")
}

enum CanvasVisibility {
  PRIVATE
  WORKSPACE
  PUBLIC // FREE FEATURE

  @@schema("canvas")
}

enum CanvasAccessLevel {
  VIEWER
  COMMENTER
  EDITOR
  OWNER

  @@schema("canvas")
}

enum CanvasActivityAction {
  CANVAS_CREATED
  CANVAS_UPDATED
  CANVAS_DELETED
  CANVAS_SHARED
  CANVAS_VISIBILITY_CHANGED

  POD_CREATED
  POD_UPDATED
  POD_DELETED
  POD_MOVED
  POD_EXECUTED
  POD_LOCKED
  POD_UNLOCKED

  EDGE_CREATED
  EDGE_DELETED

  COLLABORATOR_ADDED
  COLLABORATOR_REMOVED
  COLLABORATOR_PERMISSIONS_CHANGED

  COMMENT_ADDED
  COMMENT_RESOLVED

  USER_JOINED
  USER_LEFT

  @@schema("canvas")
}