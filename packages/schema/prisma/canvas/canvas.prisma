// /prisma/schemas/canvas.prisma

// ==========================================
// CANVAS SCHEMA - Spaces, Flows (Canvases), Pods
// ==========================================

model Space {
  id          String  @id @default(cuid())
  workspaceId String
  name        String  @db.VarChar(255)
  description String? @db.VarChar(1000)

  customInstructions String? @db.Text

  icon  String? @db.VarChar(50)
  color String? @db.VarChar(7)

  createdBy String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  flows     Flow[]

  @@unique([workspaceId, name])
  @@index([workspaceId, updatedAt(sort: Desc)])
  @@index([workspaceId, createdAt(sort: Desc)])
  @@schema("canvas")
}

model Flow {
  id          String         @id @default(cuid())
  workspaceId String
  spaceId     String? // OPTIONAL - Flow can exist without a Space
  name        String         @db.VarChar(255)
  description String?        @db.VarChar(500)
  version     Int            @default(1)
  visibility  FlowVisibility @default(PRIVATE)

  createdBy String

  thumbnailS3Key       String?   @db.VarChar(512)
  thumbnailGeneratedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  workspace      Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  space          Space?             @relation(fields: [spaceId], references: [id], onDelete: SetNull)
  pods           Pod[]
  edges          Edge[]
  contextualPods Pod[]              @relation("FlowAsContext")
  contextModules ContextModule[]    @relation("FlowOriginal")
  collaborators  FlowCollaborator[]
  invitations    FlowInvitation[]
  sessions       FlowSession[]
  activityLog    FlowActivityLog[]
  comments       FlowComment[]

  @@index([spaceId, updatedAt(sort: Desc)])
  @@index([spaceId, createdAt(sort: Desc)])
  @@index([workspaceId, updatedAt(sort: Desc)])
  @@index([workspaceId, createdAt(sort: Desc)])
  @@index([workspaceId, visibility])
  @@index([createdBy, createdAt(sort: Desc)])
  @@schema("canvas")
}

model FlowInvitation {
  id     String @id @default(cuid())
  flowId String
  email  String @db.VarChar(255)

  accessLevel FlowAccessLevel @default(EDITOR)
  permissions Json?

  invitedBy     String
  invitedUserId String?

  token  String           @unique @db.VarChar(255)
  status InvitationStatus @default(PENDING)

  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime  @db.Timestamptz(6)
  acceptedAt DateTime? @db.Timestamptz(6)

  flow        Flow  @relation(fields: [flowId], references: [id], onDelete: Cascade)
  inviter     User  @relation("FlowInvitedBy", fields: [invitedBy], references: [id], onDelete: Cascade)
  invitedUser User? @relation("FlowInvitedUser", fields: [invitedUserId], references: [id], onDelete: SetNull)

  @@index([flowId, status])
  @@index([email, status])
  @@index([token, expiresAt])
  @@schema("canvas")
}

model FlowCollaborator {
  id     String @id @default(cuid())
  flowId String
  userId String

  accessLevel FlowAccessLevel @default(EDITOR)

  canEdit    Boolean @default(true)
  canExecute Boolean @default(true)
  canDelete  Boolean @default(false)
  canShare   Boolean @default(false)
  canInvite  Boolean @default(false)

  invitedBy    String?
  invitedAt    DateTime  @default(now()) @db.Timestamptz(6)
  lastViewedAt DateTime? @db.Timestamptz(6)

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([flowId, userId])
  @@index([userId])
  @@index([flowId, accessLevel])
  @@schema("canvas")
}

model FlowSession {
  id     String  @id @default(cuid())
  flowId String
  userId String?

  anonymousName String? @db.VarChar(100)
  sessionToken  String? @unique @db.VarChar(255)

  socketId       String? @db.VarChar(255)
  cursorPosition Json?
  selectedPodIds Json?
  viewportState  Json?

  userColor String? @db.VarChar(7)

  userAgent String? @db.VarChar(500)
  ipAddress String? @db.VarChar(45)

  connectedAt     DateTime  @default(now()) @db.Timestamptz(6)
  lastHeartbeatAt DateTime  @default(now()) @db.Timestamptz(6)
  disconnectedAt  DateTime? @db.Timestamptz(6)

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId, disconnectedAt])
  @@index([socketId])
  @@index([flowId, userId, disconnectedAt])
  @@index([lastHeartbeatAt])
  @@index([sessionToken])
  @@schema("canvas")
}

model FlowActivityLog {
  id     String  @id @default(cuid())
  flowId String
  userId String?

  action FlowActivityAction

  entityType String? @db.VarChar(50)
  entityId   String? @db.VarChar(255)

  changeData Json?

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([action, createdAt(sort: Desc)])
  @@schema("canvas")
}

model FlowComment {
  id     String  @id @default(cuid())
  flowId String
  userId String?

  content  String  @db.Text
  position Json?
  podId    String?

  parentId String?

  isResolved Boolean   @default(false)
  resolvedBy String?
  resolvedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@index([podId])
  @@index([parentId])
  @@index([isResolved])
  @@schema("canvas")
}

model Pod {
  id              String             @id @default(cuid())
  flowId          String
  type            PodType
  position        Json
  executionStatus PodExecutionStatus @default(IDLE)
  lastExecutionId String?
  contextFlowId   String?
  documentId      String?

  lockedBy String?
  lockedAt DateTime? @db.Timestamptz(6)

  dynamoPartitionKey String @db.VarChar(255)
  dynamoSortKey      String @db.VarChar(255)

  s3VectorBucket String? @db.VarChar(255)
  s3VectorKey    String? @db.VarChar(512)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  flow        Flow           @relation(fields: [flowId], references: [id], onDelete: Cascade)
  contextFlow Flow?          @relation("FlowAsContext", fields: [contextFlowId], references: [id], onDelete: SetNull)
  document    Document?      @relation(fields: [documentId], references: [id], onDelete: SetNull)
  sourceEdges Edge[]         @relation("SourcePod")
  targetEdges Edge[]         @relation("TargetPod")
  executions  PodExecution[]
  usageLogs   PodUsageLog[]

  @@unique([dynamoPartitionKey, dynamoSortKey])
  @@index([flowId, type, executionStatus])
  @@index([contextFlowId])
  @@index([documentId])
  @@index([executionStatus, updatedAt])
  @@index([s3VectorBucket, s3VectorKey])
  @@index([lockedBy, lockedAt])
  @@schema("canvas")
}

model Edge {
  id           String   @id @default(cuid())
  flowId       String
  sourcePodId  String
  targetPodId  String
  sourceHandle String?  @db.VarChar(100)
  targetHandle String?  @db.VarChar(100)
  animated     Boolean  @default(false)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)

  flow      Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  sourcePod Pod  @relation("SourcePod", fields: [sourcePodId], references: [id], onDelete: Cascade)
  targetPod Pod  @relation("TargetPod", fields: [targetPodId], references: [id], onDelete: Cascade)

  @@unique([flowId, sourcePodId, sourceHandle, targetPodId, targetHandle])
  @@index([flowId])
  @@index([sourcePodId])
  @@index([targetPodId])
  @@schema("canvas")
}

model PodExecution {
  id          String             @id @default(cuid())
  podId       String
  flowId      String
  workspaceId String
  status      PodExecutionStatus @default(RUNNING)
  startedAt   DateTime           @default(now()) @db.Timestamptz(6)
  finishedAt  DateTime?          @db.Timestamptz(6)
  runtimeInMs Int?

  provider  LLMProvider
  modelId   String      @db.VarChar(255)
  modelName String?     @db.VarChar(255)

  providerMetadata Json?
  requestMetadata  Json?
  responseMetadata Json?

  errorMessage String? @db.Text
  errorCode    String? @db.VarChar(100)

  inputTokens     Int @default(0)
  outputTokens    Int @default(0)
  reasoningTokens Int @default(0)

  creditsConsumed Int @default(0)

  costInUsd Decimal? @db.Decimal(12, 8)

  pod Pod @relation(fields: [podId], references: [id], onDelete: Cascade)

  @@index([podId, startedAt(sort: Desc)])
  @@index([workspaceId, status, startedAt(sort: Desc)])
  @@index([flowId, status, startedAt(sort: Desc)])
  @@index([status, startedAt])
  @@index([provider, modelId, startedAt(sort: Desc)])
  @@index([provider, status])
  @@schema("canvas")
}

model PodUsageLog {
  id             String @id @default(cuid())
  podId          String
  executionId    String
  flowId         String
  workspaceId    String
  subscriptionId String

  provider  LLMProvider
  modelId   String      @db.VarChar(255)
  modelName String?     @db.VarChar(255)

  providerMetadata Json?

  inputTokens     Int  @default(0)
  outputTokens    Int  @default(0)
  reasoningTokens Int  @default(0)
  creditsConsumed Int  @default(0)
  runtimeInMs     Int?

  inputTokenCost     Decimal @db.Decimal(12, 8)
  outputTokenCost    Decimal @db.Decimal(12, 8)
  reasoningTokenCost Decimal @db.Decimal(12, 8)
  totalCostInUsd     Decimal @db.Decimal(12, 8)

  executedAt DateTime @default(now()) @db.Timestamptz(6)

  pod          Pod          @relation(fields: [podId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([workspaceId, executedAt(sort: Desc)])
  @@index([subscriptionId, executedAt(sort: Desc)])
  @@index([executionId])
  @@index([podId, executedAt(sort: Desc)])
  @@index([flowId, executedAt(sort: Desc)])
  @@index([provider, modelId, executedAt(sort: Desc)])
  @@index([provider, executedAt(sort: Desc)])
  @@schema("canvas")
}

model ContextModule {
  id             String   @id @default(cuid())
  workspaceId    String
  name           String   @db.VarChar(255)
  description    String?  @db.VarChar(1000)
  definitionJson Json
  originalFlowId String?
  version        Int      @default(1)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)

  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  originalFlow Flow?     @relation("FlowOriginal", fields: [originalFlowId], references: [id], onDelete: SetNull)

  @@index([workspaceId, updatedAt(sort: Desc)])
  @@index([originalFlowId])
  @@schema("canvas")
}

enum PodType {
  TEXT_INPUT
  DOCUMENT_INPUT
  URL_INPUT
  IMAGE_INPUT
  VIDEO_INPUT
  AUDIO_INPUT
  LLM_PROMPT
  EMBEDDING_POD
  TOOL_POD
  TEXT_OUTPUT
  IMAGE_OUTPUT
  VIDEO_OUTPUT
  AUDIO_OUTPUT
  CONTEXT_MODULE
  FLOW_CONTEXT_INPUT
  CODE_EXECUTION

  @@schema("canvas")
}

enum PodExecutionStatus {
  IDLE
  QUEUED
  RUNNING
  PAUSED
  COMPLETED
  ERROR
  CANCELLED

  @@schema("canvas")
}

enum FlowVisibility {
  PRIVATE
  WORKSPACE
  PUBLIC

  @@schema("canvas")
}

enum FlowAccessLevel {
  VIEWER
  COMMENTER
  EDITOR
  OWNER

  @@schema("canvas")
}

enum FlowActivityAction {
  FLOW_CREATED
  FLOW_UPDATED
  FLOW_DELETED
  FLOW_SHARED
  FLOW_VISIBILITY_CHANGED
  POD_CREATED
  POD_UPDATED
  POD_DELETED
  POD_MOVED
  POD_EXECUTED
  POD_LOCKED
  POD_UNLOCKED
  EDGE_CREATED
  EDGE_DELETED
  COLLABORATOR_ADDED
  COLLABORATOR_REMOVED
  COLLABORATOR_PERMISSIONS_CHANGED
  COMMENT_ADDED
  COMMENT_RESOLVED
  USER_JOINED
  USER_LEFT

  @@schema("canvas")
}
